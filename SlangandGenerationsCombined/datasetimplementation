# Install libraries
!pip install transformers scikit-learn pandas matplotlib

# Imports
import pandas as pd
import random
import matplotlib.pyplot as plt
from transformers import BertTokenizer
from sklearn.metrics import classification_report
from sklearn.utils import shuffle

# Initialize tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Slang dictionaries
boomer_slang = {
    "groovy": "cool",
    "far out": "amazing",
    "square": "boring or traditional",
    "bummed out": "sad",
    "dig it": "understand or like"
}

genx_slang = {
    "phat": "excellent",
    "rad": "cool",
    "whatever": "dismissive attitude",
    "psyche": "just kidding",
    "poser": "fake person"
}

millennial_slang = {
    "adulting": "doing grown-up tasks",
    "basic": "mainstream or boring",
    "salty": "upset",
    "savage": "bold or ruthless",
    "throw shade": "insult indirectly",
    "fire": "very good"  # Added overlap term
}

genz_slang = {
    "no cap": "no lie",
    "bet": "okay or yes",
    "vibe check": "mood test",
    "rizz": "charisma",
    "slaps": "very good",
    "fire": "amazing"  # Added overlap term
}

generation_slang = {
    "Boomer": boomer_slang,
    "Gen X": genx_slang,
    "Millennial": millennial_slang,
    "Gen Z": genz_slang
}

# Conversational templates
templates = [
    "That was so {slang} bro.",
    "Honestly it felt kinda {slang} ngl.",
    "No way, that's {slang} for real!",
    "I can't even, so {slang}.",
    "Whole mood was just {slang}.",
    "Lowkey, that was {slang}.",
    "Deadass, {slang} moment.",
    "Vibe was straight up {slang}.",
    "She really went full {slang} there.",
    "If that's not {slang} idk what is."
]

# Neutral non-slang sentences
neutral_sentences = [
    "The sun is shining today.",
    "I need to finish my homework.",
    "We're going to the grocery store.",
    "It might rain later this evening.",
    "They moved into a new house.",
    "We watched a movie last night.",
    "She enjoys painting landscapes.",
    "I had toast and eggs for breakfast.",
    "Reading books is relaxing to me.",
    "He went hiking over the weekend."
]

# Typos or overlap slang words
typo_words = {
    "savge": "savage",   # typo
    "pshyce": "psyche",  # typo
    "slpz": "slaps",     # typo
    "bassed": "basic",   # typo
    "rizz": "rizz"       # correct but ambiguous
}

# Build dataset
sentences = []
labels = []

# 80% slang sentences
for _ in range(4000):
    for gen, slang_dict in generation_slang.items():
        slang_word = random.choice(list(slang_dict.keys()))
        template = random.choice(templates)
        sentence = template.format(slang=slang_word)
        sentences.append(sentence)
        labels.append(gen)

# 10% neutral sentences
for _ in range(2500):
    sentence = random.choice(neutral_sentences)
    sentences.append(sentence)
    labels.append(random.choice(["Boomer", "Gen X", "Millennial", "Gen Z"]))  # Random generation

# 10% typo/overlap slang sentences
for _ in range(2500):
    typo = random.choice(list(typo_words.keys()))
    template = random.choice(templates)
    sentence = template.format(slang=typo)
    sentences.append(sentence)
    labels.append(random.choice(["Boomer", "Gen X", "Millennial", "Gen Z"]))  # Random generation

# Shuffle
df = pd.DataFrame({"Sentence": sentences, "True Generation": labels})
df = shuffle(df).reset_index(drop=True)

# Save dataset
df.to_csv("generated_20k_dataset_realistic.csv", index=False)
print("âœ… Generated and saved realistic 20k dataset!")

# Detection function
def detect_generation(sentence):
    sentence_clean = sentence.lower()
    generation_scores = {gen: 0 for gen in generation_slang.keys()}

    for gen, slang_dict in generation_slang.items():
        for slang_term in slang_dict.keys():
            if slang_term in sentence_clean:
                generation_scores[gen] += 1

    if all(score == 0 for score in generation_scores.values()):
        best_gen = "No strong match"
    else:
        best_gen = max(generation_scores, key=generation_scores.get)

    return best_gen

# Predict
predicted_labels = []
for sentence in df['Sentence']:
    pred_gen = detect_generation(sentence)
    predicted_labels.append(pred_gen)

df['Predicted Generation'] = predicted_labels

# Save predictions
df.to_csv("generation_slang_predictions_20k_realistic.csv", index=False)
print("\nâœ… Saved predictions to generation_slang_predictions_20k_realistic.csv!")

# Classification report
print("\nðŸ“ˆ Classification Report:")
print(classification_report(df['True Generation'], df['Predicted Generation'], labels=["Boomer", "Gen X", "Millennial", "Gen Z"], zero_division=0))

# Plot
summary = df['Predicted Generation'].value_counts()
plt.figure(figsize=(8,5))
plt.bar(summary.index, summary.values, color='skyblue')
plt.title("Predicted Generation Counts")
plt.xlabel("Generation")
plt.ylabel("Number of Sentences")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Preview
print("\nðŸ“„ Final Dataset Preview:")
print(df.head(10))