{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lWdWJFTYAk1W"
   },
   "source": [
    "# Slang Analyzer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bo1NXMIYBUe4"
   },
   "source": [
    "# Improved Classification\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-HjTndvjGCYA"
   },
   "source": [
    "# Comparison over generations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GAmv9DCcGF_t",
    "outputId": "43b349cd-d82b-4d84-ff0a-9c4d8a263753"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
      "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
      "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
      "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
      "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
      "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sentence: yo that song slaps no cap.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "\n",
      "Sentence: man, that party was groovy.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "\n",
      "Sentence: she is savage for throwing shade like that.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['savage']\n",
      "\n",
      "Sentence: dude, that trick was rad!\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "\n",
      "Sentence: adulting is so hard sometimes.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n"
     ]
    }
   ],
   "source": [
    "# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    # Lowercase and basic clean-up\n",
    "    sentence = sentence.lower()\n",
    "    tokens = tokenizer.tokenize(sentence)\n",
    "\n",
    "    # Initialize scores\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "\n",
    "    # Compare tokens\n",
    "    for token in tokens:\n",
    "        token_clean = token.strip(string.punctuation)\n",
    "        for gen, slang_dict in generation_slang.items():\n",
    "            if token_clean in slang_dict:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(token_clean)\n",
    "\n",
    "    # Determine best match\n",
    "    best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    # Build result\n",
    "    result = {\n",
    "        \"sentence\": sentence,\n",
    "        \"generation_scores\": generation_scores,\n",
    "        \"generation_matches\": generation_matches,\n",
    "        \"predicted_generation\": best_gen\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "# Example sentences to test\n",
    "sentences = [\n",
    "    \"Yo that song slaps no cap.\",\n",
    "    \"Man, that party was groovy.\",\n",
    "    \"She is savage for throwing shade like that.\",\n",
    "    \"Dude, that trick was rad!\",\n",
    "    \"Adulting is so hard sometimes.\"\n",
    "]\n",
    "\n",
    "# Run detection\n",
    "for sent in sentences:\n",
    "    output = detect_generation(sent)\n",
    "    print(f\"\\nSentence: {output['sentence']}\")\n",
    "    print(f\"Predicted Generation: {output['predicted_generation']}\")\n",
    "    print(\"Matches:\")\n",
    "    for gen, matches in output['generation_matches'].items():\n",
    "        if matches:\n",
    "            print(f\"  {gen}: {matches}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LlkowwK6GYLu",
    "outputId": "d3f8774a-5556-4fe7-f132-6fa872266bdc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
      "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
      "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
      "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
      "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
      "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n",
      "\n",
      "Sentence: Yo that song slaps no cap.\n",
      "Predicted Generation: Gen Z\n",
      "Matches:\n",
      "  Gen Z: ['no cap', 'slaps']\n",
      "\n",
      "Sentence: Man, that party was groovy.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "  Boomer: ['groovy']\n",
      "\n",
      "Sentence: She is savage for throwing shade like that.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['savage']\n",
      "\n",
      "Sentence: Dude, that trick was rad!\n",
      "Predicted Generation: Gen X\n",
      "Matches:\n",
      "  Gen X: ['rad']\n",
      "\n",
      "Sentence: Adulting is so hard sometimes.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['adulting']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    # Lowercase and clean\n",
    "    sentence_clean = sentence.lower()\n",
    "\n",
    "    # Initialize scores\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "\n",
    "    # Check full slang phrases\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(slang_term)\n",
    "\n",
    "    # Determine best match\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    # Build result\n",
    "    result = {\n",
    "        \"sentence\": sentence,\n",
    "        \"generation_scores\": generation_scores,\n",
    "        \"generation_matches\": generation_matches,\n",
    "        \"predicted_generation\": best_gen\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "# Example sentences to test\n",
    "sentences = [\n",
    "    \"Yo that song slaps no cap.\",\n",
    "    \"Man, that party was groovy.\",\n",
    "    \"She is savage for throwing shade like that.\",\n",
    "    \"Dude, that trick was rad!\",\n",
    "    \"Adulting is so hard sometimes.\"\n",
    "]\n",
    "\n",
    "# Run detection\n",
    "for sent in sentences:\n",
    "    output = detect_generation(sent)\n",
    "    print(f\"\\nSentence: {output['sentence']}\")\n",
    "    print(f\"Predicted Generation: {output['predicted_generation']}\")\n",
    "    print(\"Matches:\")\n",
    "    for gen, matches in output['generation_matches'].items():\n",
    "        if matches:\n",
    "            print(f\"  {gen}: {matches}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "BnNsSDCaGtRH",
    "outputId": "8285ed19-308b-4591-f4b1-50eac8001e2e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
      "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
      "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
      "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
      "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
      "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sentence: Yo that song slaps no cap.\n",
      "Predicted Generation: Gen Z\n",
      "Matches:\n",
      "  Gen Z: ['no cap', 'slaps']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "no cap      Gen Z\n",
      " slaps      Gen Z\n",
      "\n",
      "Sentence: Man, that party was groovy.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "  Boomer: ['groovy']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "groovy     Boomer\n",
      "\n",
      "Sentence: She is savage for throwing shade like that.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['savage']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "savage Millennial\n",
      "\n",
      "Sentence: Dude, that trick was rad!\n",
      "Predicted Generation: Gen X\n",
      "Matches:\n",
      "  Gen X: ['rad']\n",
      "\n",
      "Individual Word Classifications:\n",
      "Word Generation\n",
      " rad      Gen X\n",
      "\n",
      "Sentence: Adulting is so hard sometimes.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['adulting']\n",
      "\n",
      "Individual Word Classifications:\n",
      "    Word Generation\n",
      "adulting Millennial\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
      "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
      "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
      "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
      "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
      "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sentence: Yo that song slaps no cap.\n",
      "Predicted Generation: Gen Z\n",
      "Matches:\n",
      "  Gen Z: ['no cap', 'slaps']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "no cap      Gen Z\n",
      " slaps      Gen Z\n",
      "\n",
      "Sentence: Man, that party was groovy.\n",
      "Predicted Generation: Boomer\n",
      "Matches:\n",
      "  Boomer: ['groovy']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "groovy     Boomer\n",
      "\n",
      "Sentence: She is savage for throwing shade like that.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['savage']\n",
      "\n",
      "Individual Word Classifications:\n",
      "  Word Generation\n",
      "savage Millennial\n",
      "\n",
      "Sentence: Dude, that trick was rad!\n",
      "Predicted Generation: Gen X\n",
      "Matches:\n",
      "  Gen X: ['rad']\n",
      "\n",
      "Individual Word Classifications:\n",
      "Word Generation\n",
      " rad      Gen X\n",
      "\n",
      "Sentence: Adulting is so hard sometimes.\n",
      "Predicted Generation: Millennial\n",
      "Matches:\n",
      "  Millennial: ['adulting']\n",
      "\n",
      "Individual Word Classifications:\n",
      "    Word Generation\n",
      "adulting Millennial\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas matplotlib\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    # Lowercase and clean\n",
    "    sentence_clean = sentence.lower()\n",
    "\n",
    "    # Initialize scores\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "    word_classifications = []\n",
    "\n",
    "    # Check full slang phrases\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(slang_term)\n",
    "                word_classifications.append((slang_term, gen))\n",
    "\n",
    "    # Determine best match\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    # Build result\n",
    "    result = {\n",
    "        \"sentence\": sentence,\n",
    "        \"generation_scores\": generation_scores,\n",
    "        \"generation_matches\": generation_matches,\n",
    "        \"word_classifications\": word_classifications,\n",
    "        \"predicted_generation\": best_gen\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "# Example sentences to test\n",
    "sentences = [\n",
    "    \"Yo that song slaps no cap.\",\n",
    "    \"Man, that party was groovy.\",\n",
    "    \"She is savage for throwing shade like that.\",\n",
    "    \"Dude, that trick was rad!\",\n",
    "    \"Adulting is so hard sometimes.\"\n",
    "]\n",
    "\n",
    "# Analyze sentences and collect all results\n",
    "all_results = []\n",
    "\n",
    "for sent in sentences:\n",
    "    output = detect_generation(sent)\n",
    "    all_results.append(output)\n",
    "\n",
    "    print(f\"\\nSentence: {output['sentence']}\")\n",
    "    print(f\"Predicted Generation: {output['predicted_generation']}\")\n",
    "    print(\"Matches:\")\n",
    "    for gen, matches in output['generation_matches'].items():\n",
    "        if matches:\n",
    "            print(f\"  {gen}: {matches}\")\n",
    "    print(\"\\nIndividual Word Classifications:\")\n",
    "    if output['word_classifications']:\n",
    "        df_words = pd.DataFrame(output['word_classifications'], columns=[\"Word\", \"Generation\"])\n",
    "        print(df_words.to_string(index=False))\n",
    "    else:\n",
    "        print(\"No slang words matched.\")\n",
    "\n",
    "# Plot overall summary chart\n",
    "summary_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "for res in all_results:\n",
    "    for gen, score in res['generation_scores'].items():\n",
    "        summary_scores[gen] += score\n",
    "\n",
    "# Bar plot\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.bar(summary_scores.keys(), summary_scores.values(), color='skyblue')\n",
    "plt.title(\"Total Slang Matches by Generation\")\n",
    "plt.xlabel(\"Generation\")\n",
    "plt.ylabel(\"Number of Matches\")\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas matplotlib\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    # Lowercase and clean\n",
    "    sentence_clean = sentence.lower()\n",
    "\n",
    "    # Initialize scores\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "    word_classifications = []\n",
    "\n",
    "    # Check full slang phrases\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(slang_term)\n",
    "                word_classifications.append((slang_term, gen))\n",
    "\n",
    "    # Determine best match\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    # Build result\n",
    "    result = {\n",
    "        \"sentence\": sentence,\n",
    "        \"generation_scores\": generation_scores,\n",
    "        \"generation_matches\": generation_matches,\n",
    "        \"word_classifications\": word_classifications,\n",
    "        \"predicted_generation\": best_gen\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "# Example sentences to test\n",
    "sentences = [\n",
    "    \"Yo that song slaps no cap.\",\n",
    "    \"Man, that party was groovy.\",\n",
    "    \"She is savage for throwing shade like that.\",\n",
    "    \"Dude, that trick was rad!\",\n",
    "    \"Adulting is so hard sometimes.\"\n",
    "]\n",
    "\n",
    "# Analyze sentences and collect all results\n",
    "all_results = []\n",
    "\n",
    "for sent in sentences:\n",
    "    output = detect_generation(sent)\n",
    "    all_results.append(output)\n",
    "\n",
    "    print(f\"\\nSentence: {output['sentence']}\")\n",
    "    print(f\"Predicted Generation: {output['predicted_generation']}\")\n",
    "    print(\"Matches:\")\n",
    "    for gen, matches in output['generation_matches'].items():\n",
    "        if matches:\n",
    "            print(f\"  {gen}: {matches}\")\n",
    "    print(\"\\nIndividual Word Classifications:\")\n",
    "    if output['word_classifications']:\n",
    "        df_words = pd.DataFrame(output['word_classifications'], columns=[\"Word\", \"Generation\"])\n",
    "        print(df_words.to_string(index=False))\n",
    "    else:\n",
    "        print(\"No slang words matched.\")\n",
    "\n",
    "# Plot overall summary chart\n",
    "summary_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "for res in all_results:\n",
    "    for gen, score in res['generation_scores'].items():\n",
    "        summary_scores[gen] += score\n",
    "\n",
    "# Bar plot\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.bar(summary_scores.keys(), summary_scores.values(), color='skyblue')\n",
    "plt.title(\"Total Slang Matches by Generation\")\n",
    "plt.xlabel(\"Generation\")\n",
    "plt.ylabel(\"Number of Matches\")\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "background_save": true,
     "base_uri": "https://localhost:8080/"
    },
    "id": "0cbQa4YmHW3q",
    "outputId": "5ab150b8-a659-41cc-da1c-e2f0cbc6d367"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
      "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
      "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
      "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
      "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
      "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter a sentence to analyze (or type 'exit' to quit):\n",
      "(Optional) Enter the true generation (Boomer, Gen X, Millennial, Gen Z), or just press Enter to skip:\n",
      "\n",
      "Sentence: Yo what are you up to\n",
      "Predicted Generation: No strong match\n",
      "Matches:\n",
      "\n",
      "Individual Word Classifications:\n",
      "No slang words matched.\n",
      "\n",
      "Enter a sentence to analyze (or type 'exit' to quit):\n"
     ]
    }
   ],
   "source": [
    "# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas matplotlib\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    # Lowercase and clean\n",
    "    sentence_clean = sentence.lower()\n",
    "\n",
    "    # Initialize scores\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "    word_classifications = []\n",
    "\n",
    "    # Check full slang phrases\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(slang_term)\n",
    "                word_classifications.append((slang_term, gen))\n",
    "\n",
    "    # Determine best match\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    # Build result\n",
    "    result = {\n",
    "        \"sentence\": sentence,\n",
    "        \"generation_scores\": generation_scores,\n",
    "        \"generation_matches\": generation_matches,\n",
    "        \"word_classifications\": word_classifications,\n",
    "        \"predicted_generation\": best_gen\n",
    "    }\n",
    "\n",
    "    return result\n",
    "\n",
    "# Track overall stats\n",
    "all_results = []\n",
    "true_labels = []\n",
    "predicted_labels = []\n",
    "\n",
    "# Main interactive loop\n",
    "while True:\n",
    "    print(\"\\nEnter a sentence to analyze (or type 'exit' to quit):\")\n",
    "    sentence = input().strip()\n",
    "    if sentence.lower() == \"exit\":\n",
    "        break\n",
    "\n",
    "    print(\"(Optional) Enter the true generation (Boomer, Gen X, Millennial, Gen Z), or just press Enter to skip:\")\n",
    "    true_label = input().strip()\n",
    "    if true_label == \"\":\n",
    "        true_label = None\n",
    "\n",
    "    output = detect_generation(sentence)\n",
    "    all_results.append(output)\n",
    "    predicted_labels.append(output['predicted_generation'])\n",
    "    if true_label:\n",
    "        true_labels.append(true_label)\n",
    "\n",
    "    print(f\"\\nSentence: {output['sentence']}\")\n",
    "    print(f\"Predicted Generation: {output['predicted_generation']}\")\n",
    "    print(\"Matches:\")\n",
    "    for gen, matches in output['generation_matches'].items():\n",
    "        if matches:\n",
    "            print(f\"  {gen}: {matches}\")\n",
    "\n",
    "    print(\"\\nIndividual Word Classifications:\")\n",
    "    if output['word_classifications']:\n",
    "        df_words = pd.DataFrame(output['word_classifications'], columns=[\"Word\", \"Generation\"])\n",
    "        print(df_words.to_string(index=False))\n",
    "    else:\n",
    "        print(\"No slang words matched.\")\n",
    "\n",
    "# After user exits, plot summary\n",
    "if all_results:\n",
    "    summary_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    for res in all_results:\n",
    "        for gen, score in res['generation_scores'].items():\n",
    "            summary_scores[gen] += score\n",
    "\n",
    "    # Bar plot\n",
    "    plt.figure(figsize=(8,5))\n",
    "    plt.bar(summary_scores.keys(), summary_scores.values(), color='skyblue')\n",
    "    plt.title(\"Total Slang Matches by Generation\")\n",
    "    plt.xlabel(\"Generation\")\n",
    "    plt.ylabel(\"Number of Matches\")\n",
    "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "    plt.show()\n",
    "\n",
    "# Calculate and print accuracy, precision, recall, and f1 score\n",
    "if true_labels:\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(true_labels, predicted_labels, zero_division=0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000,
     "referenced_widgets": [
      "cc66d57621654df8ace357bd9f13c59a",
      "60fc12ae3a144010bedd9fbad55058e1",
      "c3c8d14bdb9b492fb7025f300c0e4ae6",
      "87c679d43c804ec49c31008bc730e1d0",
      "4870e04df3e34c8e82ab88e755bea8b2",
      "0041f2fc8ad345318e71eb098fd825db",
      "ab00f6043f604658992a9e781fa7765a",
      "b728cdd23b59437082129529d3e05ef9",
      "b159904ed2a3425bb58bb3c91c14a139",
      "37692ed24bf7424abd109e367925748f",
      "af7743ad453a4ffc86ca52583a4f4e19",
      "81a735a133f14b5b8c704e8a1b08bb4a",
      "fb163ec02bfc45edb0c5c0b92a63e8bc",
      "f8c8572cc50b4869ac12f21acfd8e304",
      "adb3e7f66cb945858c5bea25b04704df",
      "a1842711621a4f12a2584a0867bf0beb",
      "816d69d3c68740e4b06efd2ec3adf045",
      "97f1bb48d809404090b8b5f99c51a4c5",
      "c84e04616c654c98abe881ac47f10f65",
      "ff620965e6d84a8cb04268b69c53e287",
      "5bbc961c826d4e7495626023c82cee4a",
      "e53b5414af1c4521a42d023fd593e87c",
      "0552bb028e6344a3a36820dc865cb0ac",
      "0f4614d0e7c54f9a95186f1d945ae5fa",
      "a1a21b94797c4046a0459d0782065626",
      "00c6740bfebb47f692fc0aa82e5a5f9b",
      "120ec6490d1b46dca8244caf2d585082",
      "ce278a314f3f4391bda0b90c282df25f",
      "e9a5d532d2bb45b7b6323edce5bed318",
      "073e828b37904948aa32ffb5bd15bd70",
      "4f24d556de574fcbb97c36ff485e3ced",
      "eefb52233e1d4c19bed73fd16f94d131",
      "13eb35cd16ba41ef954e3d7f4484bc50",
      "ed1be510e0a14e1b80a1ddd20e4eb191",
      "8f9f729fe299478387b0ace70f311cba",
      "cb35644825e74c32be5db9bf841e3ecc",
      "b47d54464dd249f58cbe6fbb92043586",
      "e7677b33d4a24083ad49b2cf6594c489",
      "05e216a7cfd947ec8439975ad09e9057",
      "70b70d7165174a049f369a797ba58611",
      "2028340ce67b40e5909a9f203a5d2de2",
      "146099ca5f844f4d9e2a836b77f347e9",
      "498a3cafdbeb4faf98469d3bbb6bab9d",
      "07f0e33d674a42138ca68983d5c374a1"
     ]
    },
    "id": "_D3eUufLH5vY",
    "outputId": "8b3160c1-559a-49aa-9d5d-6214a5a094bf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch)\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch)\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch)\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
      "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch)\n",
      "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
      "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch)\n",
      "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch)\n",
      "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Collecting nvidia-curand-cu12==10.3.5.147 (from torch)\n",
      "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch)\n",
      "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
      "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch)\n",
      "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
      "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch)\n",
      "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n",
      "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m22.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m45.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n",
      "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
      "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
      "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
      "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
      "  Attempting uninstall: nvidia-curand-cu12\n",
      "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
      "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
      "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
      "  Attempting uninstall: nvidia-cufft-cu12\n",
      "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
      "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
      "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
      "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
      "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
      "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
      "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
      "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
      "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
      "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
      "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
      "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
      "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
      "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
      "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
      "  Attempting uninstall: nvidia-cublas-cu12\n",
      "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
      "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
      "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
      "  Attempting uninstall: nvidia-cusparse-cu12\n",
      "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
      "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
      "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
      "  Attempting uninstall: nvidia-cudnn-cu12\n",
      "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
      "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
      "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
      "  Attempting uninstall: nvidia-cusolver-cu12\n",
      "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
      "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
      "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
      "Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc66d57621654df8ace357bd9f13c59a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "81a735a133f14b5b8c704e8a1b08bb4a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0552bb028e6344a3a36820dc865cb0ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ed1be510e0a14e1b80a1ddd20e4eb191",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "         Boomer       1.00      1.00      1.00         2\n",
      "          Gen X       1.00      1.00      1.00         2\n",
      "          Gen Z       1.00      1.00      1.00         3\n",
      "     Millennial       1.00      0.67      0.80         3\n",
      "No strong match       0.00      0.00      0.00         0\n",
      "\n",
      "       accuracy                           0.90        10\n",
      "      macro avg       0.80      0.73      0.76        10\n",
      "   weighted avg       1.00      0.90      0.94        10\n",
      "\n",
      "\n",
      "Saved results to 'generation_slang_predictions.csv'\n",
      "\n",
      "Full Results:\n",
      "                                      Sentence True Generation  \\\n",
      "0                   Yo that song slaps no cap.           Gen Z   \n",
      "1                  Man, that party was groovy.          Boomer   \n",
      "2  She is savage for throwing shade like that.      Millennial   \n",
      "3                    Dude, that trick was rad!           Gen X   \n",
      "4               Adulting is so hard sometimes.      Millennial   \n",
      "5                No cap this meal slaps fr fr.           Gen Z   \n",
      "6            Far out, that sunset was amazing.          Boomer   \n",
      "7                        Psyche! Just kidding.           Gen X   \n",
      "8                  Throwing shade is so petty.      Millennial   \n",
      "9                    This track slaps so hard.           Gen Z   \n",
      "\n",
      "  Predicted Generation  \n",
      "0                Gen Z  \n",
      "1               Boomer  \n",
      "2           Millennial  \n",
      "3                Gen X  \n",
      "4           Millennial  \n",
      "5                Gen Z  \n",
      "6               Boomer  \n",
      "7                Gen X  \n",
      "8      No strong match  \n",
      "9                Gen Z  \n"
     ]
    }
   ],
   "source": [
    "# Install libraries (if not already installed)\n",
    "!pip install transformers nltk scikit-learn torch pandas matplotlib\n",
    "\n",
    "# Import libraries\n",
    "import nltk\n",
    "import string\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.corpus import wordnet\n",
    "from transformers import BertTokenizer, BertModel\n",
    "import torch\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Generation-specific slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "# Slang dictionaries grouped\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Function to analyze sentence\n",
    "def detect_generation(sentence):\n",
    "    sentence_clean = sentence.lower()\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "    generation_matches = {gen: [] for gen in generation_slang.keys()}\n",
    "\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "                generation_matches[gen].append(slang_term)\n",
    "\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    return best_gen, generation_matches\n",
    "\n",
    "# Sample dataset\n",
    "data = {\n",
    "    \"Sentence\": [\n",
    "        \"Yo that song slaps no cap.\",\n",
    "        \"Man, that party was groovy.\",\n",
    "        \"She is savage for throwing shade like that.\",\n",
    "        \"Dude, that trick was rad!\",\n",
    "        \"Adulting is so hard sometimes.\",\n",
    "        \"No cap this meal slaps fr fr.\",\n",
    "        \"Far out, that sunset was amazing.\",\n",
    "        \"Psyche! Just kidding.\",\n",
    "        \"Throwing shade is so petty.\",\n",
    "        \"This track slaps so hard.\"\n",
    "    ],\n",
    "    \"True Generation\": [\n",
    "        \"Gen Z\",\n",
    "        \"Boomer\",\n",
    "        \"Millennial\",\n",
    "        \"Gen X\",\n",
    "        \"Millennial\",\n",
    "        \"Gen Z\",\n",
    "        \"Boomer\",\n",
    "        \"Gen X\",\n",
    "        \"Millennial\",\n",
    "        \"Gen Z\"\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Analyze dataset\n",
    "predicted_labels = []\n",
    "all_generation_matches = []\n",
    "\n",
    "for index, row in df.iterrows():\n",
    "    pred_gen, matches = detect_generation(row['Sentence'])\n",
    "    predicted_labels.append(pred_gen)\n",
    "    all_generation_matches.append(matches)\n",
    "\n",
    "df['Predicted Generation'] = predicted_labels\n",
    "\n",
    "# Print classification report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(df['True Generation'], df['Predicted Generation'], zero_division=0))\n",
    "\n",
    "# Save results\n",
    "df.to_csv(\"generation_slang_predictions.csv\", index=False)\n",
    "print(\"\\nSaved results to 'generation_slang_predictions.csv'\")\n",
    "\n",
    "# Optional: Show the results table\n",
    "print(\"\\nFull Results:\")\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eI5z1mN-MM9E"
   },
   "source": [
    "# Dataset Implementation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "k_axGPWuMmwO",
    "outputId": "77463e93-3e55-4d1a-b0ff-ac17600e8b0e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.3.2)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.13.2)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n",
      "✅ Generated and saved realistic 20k dataset!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR:tornado.application:Exception in callback functools.partial(<bound method OutStream._flush of <ipykernel.iostream.OutStream object at 0x7d6f75403eb0>>)\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/tornado/ioloop.py\", line 750, in _run_callback\n",
      "    ret = callback()\n",
      "          ^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 518, in _flush\n",
      "    self.session.send(\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 742, in send\n",
      "    to_send = self.serialize(msg, ident)\n",
      "              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 630, in serialize\n",
      "    content = self.pack(content)\n",
      "              ^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 82, in <lambda>\n",
      "    json_packer = lambda obj: jsonapi.dumps(obj, default=date_default,\n",
      "                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/utils/jsonapi.py\", line 24, in dumps\n",
      "    return json.dumps(o, **kwargs).encode(\"utf8\")\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "UnicodeEncodeError: 'utf-8' codec can't encode characters in position 94-95: surrogates not allowed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       1.00      1.00      1.00      5000\n",
      "       Gen X       1.00      1.00      1.00      5000\n",
      "  Millennial       1.00      1.00      1.00      5000\n",
      "       Gen Z       1.00      1.00      1.00      5000\n",
      "\n",
      "    accuracy                           1.00     20000\n",
      "   macro avg       1.00      1.00      1.00     20000\n",
      "weighted avg       1.00      1.00      1.00     20000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR:tornado.general:Uncaught exception in ZMQStream callback\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 557, in _run_callback\n",
      "    callback(*args, **kwargs)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 120, in _handle_event\n",
      "    event_f()\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 518, in _flush\n",
      "    self.session.send(\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 742, in send\n",
      "    to_send = self.serialize(msg, ident)\n",
      "              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 630, in serialize\n",
      "    content = self.pack(content)\n",
      "              ^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 82, in <lambda>\n",
      "    json_packer = lambda obj: jsonapi.dumps(obj, default=date_default,\n",
      "                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/utils/jsonapi.py\", line 24, in dumps\n",
      "    return json.dumps(o, **kwargs).encode(\"utf8\")\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "UnicodeEncodeError: 'utf-8' codec can't encode characters in position 30-31: surrogates not allowed\n",
      "ERROR:tornado.general:Uncaught exception in zmqstream callback\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 578, in _handle_events\n",
      "    self._handle_recv()\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 607, in _handle_recv\n",
      "    self._run_callback(callback, msg)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 557, in _run_callback\n",
      "    callback(*args, **kwargs)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 120, in _handle_event\n",
      "    event_f()\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 518, in _flush\n",
      "    self.session.send(\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 742, in send\n",
      "    to_send = self.serialize(msg, ident)\n",
      "              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 630, in serialize\n",
      "    content = self.pack(content)\n",
      "              ^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 82, in <lambda>\n",
      "    json_packer = lambda obj: jsonapi.dumps(obj, default=date_default,\n",
      "                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/utils/jsonapi.py\", line 24, in dumps\n",
      "    return json.dumps(o, **kwargs).encode(\"utf8\")\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "UnicodeEncodeError: 'utf-8' codec can't encode characters in position 30-31: surrogates not allowed\n",
      "ERROR:asyncio:Exception in callback BaseAsyncIOLoop._handle_events(27, 1)\n",
      "handle: <Handle BaseAsyncIOLoop._handle_events(27, 1)>\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/lib/python3.11/asyncio/events.py\", line 84, in _run\n",
      "    self._context.run(self._callback, *self._args)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/tornado/platform/asyncio.py\", line 202, in _handle_events\n",
      "    handler_func(fileobj, events)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 578, in _handle_events\n",
      "    self._handle_recv()\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 607, in _handle_recv\n",
      "    self._run_callback(callback, msg)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/eventloop/zmqstream.py\", line 557, in _run_callback\n",
      "    callback(*args, **kwargs)\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 120, in _handle_event\n",
      "    event_f()\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/iostream.py\", line 518, in _flush\n",
      "    self.session.send(\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 742, in send\n",
      "    to_send = self.serialize(msg, ident)\n",
      "              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 630, in serialize\n",
      "    content = self.pack(content)\n",
      "              ^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/jupyter_client/session.py\", line 82, in <lambda>\n",
      "    json_packer = lambda obj: jsonapi.dumps(obj, default=date_default,\n",
      "                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/zmq/utils/jsonapi.py\", line 24, in dumps\n",
      "    return json.dumps(o, **kwargs).encode(\"utf8\")\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "UnicodeEncodeError: 'utf-8' codec can't encode characters in position 30-31: surrogates not allowed\n"
     ]
    }
   ],
   "source": [
    "# Install libraries\n",
    "!pip install transformers scikit-learn pandas matplotlib\n",
    "\n",
    "# Import libraries\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from transformers import BertTokenizer\n",
    "from sklearn.metrics import classification_report\n",
    "import random\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Define slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\"\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\"\n",
    "}\n",
    "\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Sentence templates\n",
    "templates = [\n",
    "    \"This {slang} moment was unforgettable.\",\n",
    "    \"I can't believe how {slang} that was.\",\n",
    "    \"That's totally {slang}, bro.\",\n",
    "    \"Honestly, it felt {slang}.\",\n",
    "    \"Everything about it was so {slang}.\",\n",
    "    \"We stayed {slang} all night!\",\n",
    "    \"Their vibe was pure {slang}.\",\n",
    "    \"No one understood how {slang} it got.\",\n",
    "    \"She pulled a real {slang} move.\",\n",
    "    \"If that's not {slang}, I don't know what is.\"\n",
    "]\n",
    "\n",
    "# Generate 20k dataset\n",
    "sentences = []\n",
    "labels = []\n",
    "\n",
    "for _ in range(5000):\n",
    "    for gen, slang_list in generation_slang.items():\n",
    "        slang_word = random.choice(list(slang_list.keys()))\n",
    "        template = random.choice(templates)\n",
    "        sentence = template.format(slang=slang_word)\n",
    "        sentences.append(sentence)\n",
    "        labels.append(gen)\n",
    "\n",
    "# Build dataset\n",
    "df = pd.DataFrame({\"Sentence\": sentences, \"True Generation\": labels})\n",
    "df.to_csv(\"generated_20k_dataset.csv\", index=False)\n",
    "print(\"\\u2705 Generated and saved realistic 20k dataset!\")\n",
    "\n",
    "# Detection function\n",
    "def detect_generation(sentence):\n",
    "    sentence_clean = sentence.lower()\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    return best_gen\n",
    "\n",
    "# Read dataset\n",
    "df = pd.read_csv(\"generated_20k_dataset.csv\")\n",
    "\n",
    "# Predict generations\n",
    "predicted_labels = []\n",
    "for sentence in df['Sentence']:\n",
    "    pred_gen = detect_generation(sentence)\n",
    "    predicted_labels.append(pred_gen)\n",
    "\n",
    "df['Predicted Generation'] = predicted_labels\n",
    "\n",
    "# Save predictions\n",
    "df.to_csv(\"generation_slang_predictions_20k.csv\", index=False)\n",
    "print(\"\\n\\u2705 Saved predictions to generation_slang_predictions_20k.csv!\")\n",
    "\n",
    "# Classification report\n",
    "print(\"\\n\\ud83d\\udcc8 Classification Report:\")\n",
    "print(classification_report(df['True Generation'], df['Predicted Generation'], labels=[\"Boomer\", \"Gen X\", \"Millennial\", \"Gen Z\"], zero_division=0))\n",
    "\n",
    "# Bar plot\n",
    "summary = df['Predicted Generation'].value_counts()\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.bar(summary.index, summary.values, color='skyblue')\n",
    "plt.title(\"Predicted Generation Counts\")\n",
    "plt.xlabel(\"Generation\")\n",
    "plt.ylabel(\"Number of Sentences\")\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()\n",
    "\n",
    "# Final preview\n",
    "print(\"\\n\\ud83d\\udcc4 Final Dataset Preview:\")\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "MnDaQDR8NPMW",
    "outputId": "9c12b3b8-f248-4a88-c9df-34eba451c9b0"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20000,\n  \"fields\": [\n    {\n      \"column\": \"Sentence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"Honestly, it felt whatever.\",\n          \"I can't believe how square that was.\",\n          \"We stayed rad all night!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"True Generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Gen X\",\n          \"Gen Z\",\n          \"Boomer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted Generation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Gen X\",\n          \"Gen Z\",\n          \"Boomer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "df"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-cf5e9269-de49-4973-b079-872ee8fa3fec\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence</th>\n",
       "      <th>True Generation</th>\n",
       "      <th>Predicted Generation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>We stayed dig it all night!</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Honestly, it felt rad.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>She pulled a real basic move.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>That's totally rizz, bro.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Their vibe was pure square.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Honestly, it felt phat.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>I can't believe how adulting that was.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>I can't believe how no cap that was.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Their vibe was pure square.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Everything about it was so psyche.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Honestly, it felt throw shade.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>This no cap moment was unforgettable.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Honestly, it felt dig it.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>I can't believe how phat that was.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>This salty moment was unforgettable.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>She pulled a real slaps move.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>I can't believe how square that was.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Everything about it was so phat.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Everything about it was so basic.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>I can't believe how bet that was.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>We stayed bummed out all night!</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>I can't believe how phat that was.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Honestly, it felt adulting.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Honestly, it felt bet.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>That's totally dig it, bro.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>No one understood how poser it got.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Their vibe was pure throw shade.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>No one understood how slaps it got.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>No one understood how far out it got.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>She pulled a real psyche move.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>We stayed adulting all night!</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Everything about it was so no cap.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>That's totally dig it, bro.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>We stayed rad all night!</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Their vibe was pure savage.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>She pulled a real bet move.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>If that's not square, I don't know what is.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>If that's not whatever, I don't know what is.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Their vibe was pure savage.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>This vibe check moment was unforgettable.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Honestly, it felt far out.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>No one understood how whatever it got.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Their vibe was pure basic.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>She pulled a real vibe check move.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>No one understood how groovy it got.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Honestly, it felt rad.</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>This salty moment was unforgettable.</td>\n",
       "      <td>Millennial</td>\n",
       "      <td>Millennial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>That's totally slaps, bro.</td>\n",
       "      <td>Gen Z</td>\n",
       "      <td>Gen Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>She pulled a real bummed out move.</td>\n",
       "      <td>Boomer</td>\n",
       "      <td>Boomer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>We stayed poser all night!</td>\n",
       "      <td>Gen X</td>\n",
       "      <td>Gen X</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf5e9269-de49-4973-b079-872ee8fa3fec')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-cf5e9269-de49-4973-b079-872ee8fa3fec button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-cf5e9269-de49-4973-b079-872ee8fa3fec');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-0ed4c064-a745-406c-8ad4-df7fb125e2f0\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ed4c064-a745-406c-8ad4-df7fb125e2f0')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-0ed4c064-a745-406c-8ad4-df7fb125e2f0 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                                         Sentence True Generation  \\\n",
       "0                     We stayed dig it all night!          Boomer   \n",
       "1                          Honestly, it felt rad.           Gen X   \n",
       "2                   She pulled a real basic move.      Millennial   \n",
       "3                       That's totally rizz, bro.           Gen Z   \n",
       "4                     Their vibe was pure square.          Boomer   \n",
       "5                         Honestly, it felt phat.           Gen X   \n",
       "6          I can't believe how adulting that was.      Millennial   \n",
       "7            I can't believe how no cap that was.           Gen Z   \n",
       "8                     Their vibe was pure square.          Boomer   \n",
       "9              Everything about it was so psyche.           Gen X   \n",
       "10                 Honestly, it felt throw shade.      Millennial   \n",
       "11          This no cap moment was unforgettable.           Gen Z   \n",
       "12                      Honestly, it felt dig it.          Boomer   \n",
       "13             I can't believe how phat that was.           Gen X   \n",
       "14           This salty moment was unforgettable.      Millennial   \n",
       "15                  She pulled a real slaps move.           Gen Z   \n",
       "16           I can't believe how square that was.          Boomer   \n",
       "17               Everything about it was so phat.           Gen X   \n",
       "18              Everything about it was so basic.      Millennial   \n",
       "19              I can't believe how bet that was.           Gen Z   \n",
       "20                We stayed bummed out all night!          Boomer   \n",
       "21             I can't believe how phat that was.           Gen X   \n",
       "22                    Honestly, it felt adulting.      Millennial   \n",
       "23                         Honestly, it felt bet.           Gen Z   \n",
       "24                    That's totally dig it, bro.          Boomer   \n",
       "25            No one understood how poser it got.           Gen X   \n",
       "26               Their vibe was pure throw shade.      Millennial   \n",
       "27            No one understood how slaps it got.           Gen Z   \n",
       "28          No one understood how far out it got.          Boomer   \n",
       "29                 She pulled a real psyche move.           Gen X   \n",
       "30                  We stayed adulting all night!      Millennial   \n",
       "31             Everything about it was so no cap.           Gen Z   \n",
       "32                    That's totally dig it, bro.          Boomer   \n",
       "33                       We stayed rad all night!           Gen X   \n",
       "34                    Their vibe was pure savage.      Millennial   \n",
       "35                    She pulled a real bet move.           Gen Z   \n",
       "36    If that's not square, I don't know what is.          Boomer   \n",
       "37  If that's not whatever, I don't know what is.           Gen X   \n",
       "38                    Their vibe was pure savage.      Millennial   \n",
       "39      This vibe check moment was unforgettable.           Gen Z   \n",
       "40                     Honestly, it felt far out.          Boomer   \n",
       "41         No one understood how whatever it got.           Gen X   \n",
       "42                     Their vibe was pure basic.      Millennial   \n",
       "43             She pulled a real vibe check move.           Gen Z   \n",
       "44           No one understood how groovy it got.          Boomer   \n",
       "45                         Honestly, it felt rad.           Gen X   \n",
       "46           This salty moment was unforgettable.      Millennial   \n",
       "47                     That's totally slaps, bro.           Gen Z   \n",
       "48             She pulled a real bummed out move.          Boomer   \n",
       "49                     We stayed poser all night!           Gen X   \n",
       "\n",
       "   Predicted Generation  \n",
       "0                Boomer  \n",
       "1                 Gen X  \n",
       "2            Millennial  \n",
       "3                 Gen Z  \n",
       "4                Boomer  \n",
       "5                 Gen X  \n",
       "6            Millennial  \n",
       "7                 Gen Z  \n",
       "8                Boomer  \n",
       "9                 Gen X  \n",
       "10           Millennial  \n",
       "11                Gen Z  \n",
       "12               Boomer  \n",
       "13                Gen X  \n",
       "14           Millennial  \n",
       "15                Gen Z  \n",
       "16               Boomer  \n",
       "17                Gen X  \n",
       "18           Millennial  \n",
       "19                Gen Z  \n",
       "20               Boomer  \n",
       "21                Gen X  \n",
       "22           Millennial  \n",
       "23                Gen Z  \n",
       "24               Boomer  \n",
       "25                Gen X  \n",
       "26           Millennial  \n",
       "27                Gen Z  \n",
       "28               Boomer  \n",
       "29                Gen X  \n",
       "30           Millennial  \n",
       "31                Gen Z  \n",
       "32               Boomer  \n",
       "33                Gen X  \n",
       "34           Millennial  \n",
       "35                Gen Z  \n",
       "36               Boomer  \n",
       "37                Gen X  \n",
       "38           Millennial  \n",
       "39                Gen Z  \n",
       "40               Boomer  \n",
       "41                Gen X  \n",
       "42           Millennial  \n",
       "43                Gen Z  \n",
       "44               Boomer  \n",
       "45                Gen X  \n",
       "46           Millennial  \n",
       "47                Gen Z  \n",
       "48               Boomer  \n",
       "49                Gen X  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the CSV\n",
    "df = pd.read_csv(\"generation_slang_predictions_20k.csv\")\n",
    "\n",
    "# View first few rows\n",
    "df.head(50)  # shows 20 sentences\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000,
     "referenced_widgets": [
      "adf7a205927348319ebbfaa601d9dca8",
      "5314ce565f3d4b8db6f93c42d1710667",
      "84f44e920f5a4fceb83bce7fc873d3dc",
      "4815d662e84c4d5881979c619cf11b8b",
      "89f5796bf0cd4bdcbf0157e8d5b2ae2b",
      "55445a45cca74aa3b43a621d163e87b4",
      "433bce933b1b411ca84080ba405de113",
      "4db8d2f3dec24a7f93916324ae88454a",
      "5f27a545d1a94f37aa36b60a24f7ae4c",
      "8bccfc8a65644412b726e79c3d1d44c2",
      "9f9a357aed974385b4783a920f7ca9d5",
      "23366b87d7c341a0822b24d7c9dfbdfa",
      "cd9c16ed57de4a35b7b43617236f2a83",
      "b462b434dc4648aa8cd576b74142a9c9",
      "e9155d7761b24be8838db86512dce010",
      "c7941c98aa26485aac4a83e9ecd6ddfd",
      "901c65a4c41f416b911626e9b8159b4f",
      "671b42208ef1411e98aa886071892d02",
      "2cc47921c6564808a8f74786a7eb143a",
      "7778b8b4545a4fd68f7d43b9b1f95410",
      "0ed277dc71a64106abdb5e716ebde225",
      "bbcb9ca65f9542fea1d5db60adb9cab4",
      "8cb6c7a82ebf45f1accd0f609a0a8b17",
      "8a62ee4887cb42e6a8351a17c6fd65b6",
      "e3cac4c0bb4e44c78e95c191cf7d7376",
      "5a3eba9e71e042d98446ac7d08d70001",
      "3e27b4dec9f34874ac8599ad0e812e9f",
      "476e0ab05382400ebc354d42af45fc42",
      "9edc35be512c4d0fad64edaec491bcd3",
      "6259e4539ce840c5814be39fbc42fccd",
      "8f3d691445774301b4c31dab15f7a19c",
      "a11697edd77a4ac99501a4fe562edee0",
      "93128fa98f6e4661a1001a5e51324965",
      "523ce3fc84404aa19462d65762d3a4c0",
      "e320cf6599584418b30a4359dacf5543",
      "1acbd23712f4482993416cbf311f2ba3",
      "bd990e7b5e294943940285d4f0b9d71e",
      "fc11c6410c59406195cd983bae82626f",
      "e5a97bf6b93d4e61829a9d70eea09c98",
      "962202e8ad3a4e6eb454012671532f55",
      "1d5fcbbfd8874d01bc52749b35d8f96f",
      "789aa570d7594607834cad61bb025860",
      "26de761aad5346faaea9f156d4d622c7",
      "a303c8b579ab409c8e182ed6d89275ea"
     ]
    },
    "id": "zSRpQIXoPDZp",
    "outputId": "566fc294-6982-4aed-ebac-2fce00411aa9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.3.2)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.13.2)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "adf7a205927348319ebbfaa601d9dca8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "23366b87d7c341a0822b24d7c9dfbdfa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8cb6c7a82ebf45f1accd0f609a0a8b17",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "523ce3fc84404aa19462d65762d3a4c0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Generated and saved realistic 20k dataset!\n",
      "\n",
      "✅ Saved predictions to generation_slang_predictions_20k_realistic.csv!\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       1.00      0.76      0.86      5272\n",
      "       Gen X       1.00      0.76      0.86      5271\n",
      "  Millennial       0.85      0.76      0.81      5244\n",
      "       Gen Z       0.90      0.66      0.76      5213\n",
      "\n",
      "   micro avg       0.94      0.73      0.82     21000\n",
      "   macro avg       0.94      0.73      0.82     21000\n",
      "weighted avg       0.94      0.73      0.82     21000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Dataset Preview:\n",
      "                                 Sentence True Generation Predicted Generation\n",
      "0           No way, that's phat for real!           Gen X                Gen X\n",
      "1             Whole mood was just pshyce.           Gen Z      No strong match\n",
      "2      Honestly it felt kinda groovy ngl.          Boomer               Boomer\n",
      "3                I can't even, so no cap.           Gen Z                Gen Z\n",
      "4         No way, that's psyche for real!           Gen X                Gen X\n",
      "5  She really went full bummed out there.          Boomer               Boomer\n",
      "6           No way, that's phat for real!           Gen X                Gen X\n",
      "7  She really went full bummed out there.          Boomer               Boomer\n",
      "8           No way, that's fire for real!           Gen Z           Millennial\n",
      "9                  Deadass, basic moment.      Millennial           Millennial\n"
     ]
    }
   ],
   "source": [
    "# Install libraries\n",
    "!pip install transformers scikit-learn pandas matplotlib\n",
    "\n",
    "# Imports\n",
    "import pandas as pd\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from transformers import BertTokenizer\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "# Initialize tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# Slang dictionaries\n",
    "boomer_slang = {\n",
    "    \"groovy\": \"cool\",\n",
    "    \"far out\": \"amazing\",\n",
    "    \"square\": \"boring or traditional\",\n",
    "    \"bummed out\": \"sad\",\n",
    "    \"dig it\": \"understand or like\"\n",
    "}\n",
    "\n",
    "genx_slang = {\n",
    "    \"phat\": \"excellent\",\n",
    "    \"rad\": \"cool\",\n",
    "    \"whatever\": \"dismissive attitude\",\n",
    "    \"psyche\": \"just kidding\",\n",
    "    \"poser\": \"fake person\"\n",
    "}\n",
    "\n",
    "millennial_slang = {\n",
    "    \"adulting\": \"doing grown-up tasks\",\n",
    "    \"basic\": \"mainstream or boring\",\n",
    "    \"salty\": \"upset\",\n",
    "    \"savage\": \"bold or ruthless\",\n",
    "    \"throw shade\": \"insult indirectly\",\n",
    "    \"fire\": \"very good\"  # Added overlap term\n",
    "}\n",
    "\n",
    "genz_slang = {\n",
    "    \"no cap\": \"no lie\",\n",
    "    \"bet\": \"okay or yes\",\n",
    "    \"vibe check\": \"mood test\",\n",
    "    \"rizz\": \"charisma\",\n",
    "    \"slaps\": \"very good\",\n",
    "    \"fire\": \"amazing\"  # Added overlap term\n",
    "}\n",
    "\n",
    "generation_slang = {\n",
    "    \"Boomer\": boomer_slang,\n",
    "    \"Gen X\": genx_slang,\n",
    "    \"Millennial\": millennial_slang,\n",
    "    \"Gen Z\": genz_slang\n",
    "}\n",
    "\n",
    "# Conversational templates\n",
    "templates = [\n",
    "    \"That was so {slang} bro.\",\n",
    "    \"Honestly it felt kinda {slang} ngl.\",\n",
    "    \"No way, that's {slang} for real!\",\n",
    "    \"I can't even, so {slang}.\",\n",
    "    \"Whole mood was just {slang}.\",\n",
    "    \"Lowkey, that was {slang}.\",\n",
    "    \"Deadass, {slang} moment.\",\n",
    "    \"Vibe was straight up {slang}.\",\n",
    "    \"She really went full {slang} there.\",\n",
    "    \"If that's not {slang} idk what is.\"\n",
    "]\n",
    "\n",
    "# Neutral non-slang sentences\n",
    "neutral_sentences = [\n",
    "    \"The sun is shining today.\",\n",
    "    \"I need to finish my homework.\",\n",
    "    \"We're going to the grocery store.\",\n",
    "    \"It might rain later this evening.\",\n",
    "    \"They moved into a new house.\",\n",
    "    \"We watched a movie last night.\",\n",
    "    \"She enjoys painting landscapes.\",\n",
    "    \"I had toast and eggs for breakfast.\",\n",
    "    \"Reading books is relaxing to me.\",\n",
    "    \"He went hiking over the weekend.\"\n",
    "]\n",
    "\n",
    "# Typos or overlap slang words\n",
    "typo_words = {\n",
    "    \"savge\": \"savage\",   # typo\n",
    "    \"pshyce\": \"psyche\",  # typo\n",
    "    \"slpz\": \"slaps\",     # typo\n",
    "    \"bassed\": \"basic\",   # typo\n",
    "    \"rizz\": \"rizz\"       # correct but ambiguous\n",
    "}\n",
    "\n",
    "# Build dataset\n",
    "sentences = []\n",
    "labels = []\n",
    "\n",
    "# 80% slang sentences\n",
    "for _ in range(4000):\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        slang_word = random.choice(list(slang_dict.keys()))\n",
    "        template = random.choice(templates)\n",
    "        sentence = template.format(slang=slang_word)\n",
    "        sentences.append(sentence)\n",
    "        labels.append(gen)\n",
    "\n",
    "# 10% neutral sentences\n",
    "for _ in range(2500):\n",
    "    sentence = random.choice(neutral_sentences)\n",
    "    sentences.append(sentence)\n",
    "    labels.append(random.choice([\"Boomer\", \"Gen X\", \"Millennial\", \"Gen Z\"]))  # Random generation\n",
    "\n",
    "# 10% typo/overlap slang sentences\n",
    "for _ in range(2500):\n",
    "    typo = random.choice(list(typo_words.keys()))\n",
    "    template = random.choice(templates)\n",
    "    sentence = template.format(slang=typo)\n",
    "    sentences.append(sentence)\n",
    "    labels.append(random.choice([\"Boomer\", \"Gen X\", \"Millennial\", \"Gen Z\"]))  # Random generation\n",
    "\n",
    "# Shuffle\n",
    "df = pd.DataFrame({\"Sentence\": sentences, \"True Generation\": labels})\n",
    "df = shuffle(df).reset_index(drop=True)\n",
    "\n",
    "# Save dataset\n",
    "df.to_csv(\"generated_20k_dataset_realistic.csv\", index=False)\n",
    "print(\"✅ Generated and saved realistic 20k dataset!\")\n",
    "\n",
    "# Detection function\n",
    "def detect_generation(sentence):\n",
    "    sentence_clean = sentence.lower()\n",
    "    generation_scores = {gen: 0 for gen in generation_slang.keys()}\n",
    "\n",
    "    for gen, slang_dict in generation_slang.items():\n",
    "        for slang_term in slang_dict.keys():\n",
    "            if slang_term in sentence_clean:\n",
    "                generation_scores[gen] += 1\n",
    "\n",
    "    if all(score == 0 for score in generation_scores.values()):\n",
    "        best_gen = \"No strong match\"\n",
    "    else:\n",
    "        best_gen = max(generation_scores, key=generation_scores.get)\n",
    "\n",
    "    return best_gen\n",
    "\n",
    "# Predict\n",
    "predicted_labels = []\n",
    "for sentence in df['Sentence']:\n",
    "    pred_gen = detect_generation(sentence)\n",
    "    predicted_labels.append(pred_gen)\n",
    "\n",
    "df['Predicted Generation'] = predicted_labels\n",
    "\n",
    "# Save predictions\n",
    "df.to_csv(\"generation_slang_predictions_20k_realistic.csv\", index=False)\n",
    "print(\"\\n✅ Saved predictions to generation_slang_predictions_20k_realistic.csv!\")\n",
    "\n",
    "# Classification report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(df['True Generation'], df['Predicted Generation'], labels=[\"Boomer\", \"Gen X\", \"Millennial\", \"Gen Z\"], zero_division=0))\n",
    "\n",
    "# Plot\n",
    "summary = df['Predicted Generation'].value_counts()\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.bar(summary.index, summary.values, color='skyblue')\n",
    "plt.title(\"Predicted Generation Counts\")\n",
    "plt.xlabel(\"Generation\")\n",
    "plt.ylabel(\"Number of Sentences\")\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()\n",
    "\n",
    "# Preview\n",
    "print(\"\\nFinal Dataset Preview:\")\n",
    "print(df.head(10))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_T23-wqz2BLA"
   },
   "source": [
    "# FFNN\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 538,
     "referenced_widgets": [
      "f4dce9896dc54746949ce6f7a26c3b90",
      "05580f927d0d4ce0abba4a47411d5778",
      "f7d670b2ce2849159c99d347f219867c",
      "a6e8b13434a64fe0967b61073c0bc8c1",
      "49327663543e470aa44037ee1fe59c12",
      "fde0ab3b2b3c4143bee2358e72c61c05",
      "c8125a97a6174514b2084fb07d5ef3da",
      "cc6b029dd50c464e83943dea8bf3a0a0",
      "ab858fbb361c4722957c0fa0aae53a34",
      "c5668e67a74347d9a4cf0de1a5e716ab",
      "42c63bedf24b46afb5c704b413e5cec4",
      "ec6d394b1adc4edc972646269e844e03",
      "1bd44fb8e65e42588e01d1a2e072487a",
      "a0e14234724d4be4801ab8b895937220",
      "a7c8c826c5944a188963e61f466643cf",
      "707296cb3051452a990842727a85436b",
      "3c85941005774ce0a6a35ab21789556c",
      "c5d2a81f9bbd481e9e35707946bf0ede",
      "8b7ea8d127184afeb3f4a57ad42e0dea",
      "ee36082b939e469499e03ec5650ec9f7",
      "9904dcef1a25424bbd6f93460249b225",
      "53333282e03a40a0ba54161e06e080ad",
      "bdb08bce003a42e7a603e2d041967b2b",
      "896ccb9b4b384db1a2fed33869ae734b",
      "97d6080f01304d0f909ddb7fdd68790f",
      "58db1cf4edc74e1dbfd79de3bbdc5df9",
      "8870e01ea3e54ae1b31ca7fbc9195d35",
      "cf26574580f047cba5b19915265537cf",
      "f371fbd36f13496b808aed28e7fc6ee4",
      "70351de5813f47dda81357870047b53d",
      "a62a74f285184269b95099652752c29d",
      "05a36f0dc4274723ad24282cc896755e",
      "d4dbfd06e5474caf8c12e94b73ef671d",
      "c3498e01123d409d9933b633d705fc92",
      "7d8eff4993dd4ac2a71533ee615589ea",
      "4424956d81b3446bb32be073f9a4930b",
      "e7560542cb8948879a685b4dba3d4726",
      "352bba1218924e8da5e80ea1b68b9cb0",
      "86d5262d25aa454d896960f4dbeee4f6",
      "2e07deae779041b0a40bd58c79213454",
      "8f6f508cda87470e96682aa33d353a68",
      "a27743d95bac4680b3b84df73831ab6b",
      "696a7fe584bc4397ab5361c249b8f508",
      "a114a401bb684928aae85e94a40c0cb3",
      "9a58e0931255496f9c2ed19f7b51b099",
      "e3d96c8ef6bb4a21962dd9671ac2d59a",
      "f62cfdb87068402ab1ccb25a9de13c50",
      "c452ad0ee6e048579d8d29f82e627de3",
      "9eaeb09eb42844ee99e82f25d4de284c",
      "a8a378cf939244c69c43af502f61a0ba",
      "544e0956dbe04fa3a7570c1f9e0b26c8",
      "a51510ac67df47708b840a86935d0191",
      "8fa234ce242547ab812f8b14546765b0",
      "0029a54ad7e04605b7854c2b6908f42c",
      "596dfc4d4a014edcbd43a308afd94240"
     ]
    },
    "id": "CP6Kk8ht2Gjj",
    "outputId": "15543b43-abbf-439b-c3b5-d2c10f612ffe"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f4dce9896dc54746949ce6f7a26c3b90",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec6d394b1adc4edc972646269e844e03",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bdb08bce003a42e7a603e2d041967b2b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c3498e01123d409d9933b633d705fc92",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n",
      "WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a58e0931255496f9c2ed19f7b51b099",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "NameError",
     "evalue": "name 'train_loader' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-8b813440ad8b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0mEPOCHS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEPOCHS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# assuming DataLoader with (text, label)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m         \u001b[0mtexts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0membeddings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_embeddings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtexts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'train_loader' is not defined"
     ]
    }
   ],
   "source": [
    "from transformers import BertTokenizer, BertModel\n",
    "import torch.nn as nn\n",
    "import torch\n",
    "\n",
    "# Load BERT for embedding\n",
    "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
    "bert = BertModel.from_pretrained(\"bert-base-uncased\")\n",
    "\n",
    "class FFNNClassifier(nn.Module):\n",
    "    def __init__(self, hidden_dim=128, num_classes=4):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(768, hidden_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(hidden_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        return self.fc2(x)\n",
    "\n",
    "# Use BERT embeddings\n",
    "def get_embeddings(text_list):\n",
    "    inputs = tokenizer(text_list, padding=True, truncation=True, return_tensors=\"pt\")\n",
    "    with torch.no_grad():\n",
    "        outputs = bert(**inputs)\n",
    "        return outputs.pooler_output  # [CLS] token\n",
    "\n",
    "# Training loop with epochs\n",
    "model = FFNNClassifier()\n",
    "loss_fn = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "EPOCHS = 5\n",
    "for epoch in range(EPOCHS):\n",
    "    for batch in train_loader:  # assuming DataLoader with (text, label)\n",
    "        texts, labels = batch\n",
    "        embeddings = get_embeddings(texts)\n",
    "        preds = model(embeddings)\n",
    "        loss = loss_fn(preds, labels)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "    print(f\"Epoch {epoch+1}, Loss: {loss.item()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 382
    },
    "id": "7Q10p5Qq2kuz",
    "outputId": "b5f3b641-73e3-429c-d832-48de0190731a"
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'generated_20k_dataset_realistic.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-d734d1a938e0>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Load your dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generated_20k_dataset_realistic.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Label mapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'generated_20k_dataset_realistic.csv'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torch\n",
    "\n",
    "# Load your dataset\n",
    "df = pd.read_csv(\"generated_20k_dataset_realistic.csv\")\n",
    "\n",
    "# Label mapping\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "class SlangDataset(Dataset):\n",
    "    def __init__(self, dataframe):\n",
    "        self.texts = dataframe['sentence'].tolist()\n",
    "        self.labels = [label_map[label] for label in dataframe['generation']]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.texts[idx], torch.tensor(self.labels[idx])\n",
    "\n",
    "dataset = SlangDataset(df)\n",
    "train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 333
    },
    "id": "hERRj2CL2ru5",
    "outputId": "47894c6b-ad27-4602-d66c-6ddbf1065a60"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "     <input type=\"file\" id=\"files-75c1bcb7-f932-4ac4-88c2-450bf0893aee\" name=\"files[]\" multiple disabled\n",
       "        style=\"border:none\" />\n",
       "     <output id=\"result-75c1bcb7-f932-4ac4-88c2-450bf0893aee\">\n",
       "      Upload widget is only available when the cell has been executed in the\n",
       "      current browser session. Please rerun this cell to enable.\n",
       "      </output>\n",
       "      <script>// Copyright 2017 Google LLC\n",
       "//\n",
       "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       "// you may not use this file except in compliance with the License.\n",
       "// You may obtain a copy of the License at\n",
       "//\n",
       "//      http://www.apache.org/licenses/LICENSE-2.0\n",
       "//\n",
       "// Unless required by applicable law or agreed to in writing, software\n",
       "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       "// See the License for the specific language governing permissions and\n",
       "// limitations under the License.\n",
       "\n",
       "/**\n",
       " * @fileoverview Helpers for google.colab Python module.\n",
       " */\n",
       "(function(scope) {\n",
       "function span(text, styleAttributes = {}) {\n",
       "  const element = document.createElement('span');\n",
       "  element.textContent = text;\n",
       "  for (const key of Object.keys(styleAttributes)) {\n",
       "    element.style[key] = styleAttributes[key];\n",
       "  }\n",
       "  return element;\n",
       "}\n",
       "\n",
       "// Max number of bytes which will be uploaded at a time.\n",
       "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
       "\n",
       "function _uploadFiles(inputId, outputId) {\n",
       "  const steps = uploadFilesStep(inputId, outputId);\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  // Cache steps on the outputElement to make it available for the next call\n",
       "  // to uploadFilesContinue from Python.\n",
       "  outputElement.steps = steps;\n",
       "\n",
       "  return _uploadFilesContinue(outputId);\n",
       "}\n",
       "\n",
       "// This is roughly an async generator (not supported in the browser yet),\n",
       "// where there are multiple asynchronous steps and the Python side is going\n",
       "// to poll for completion of each step.\n",
       "// This uses a Promise to block the python side on completion of each step,\n",
       "// then passes the result of the previous step as the input to the next step.\n",
       "function _uploadFilesContinue(outputId) {\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  const steps = outputElement.steps;\n",
       "\n",
       "  const next = steps.next(outputElement.lastPromiseValue);\n",
       "  return Promise.resolve(next.value.promise).then((value) => {\n",
       "    // Cache the last promise value to make it available to the next\n",
       "    // step of the generator.\n",
       "    outputElement.lastPromiseValue = value;\n",
       "    return next.value.response;\n",
       "  });\n",
       "}\n",
       "\n",
       "/**\n",
       " * Generator function which is called between each async step of the upload\n",
       " * process.\n",
       " * @param {string} inputId Element ID of the input file picker element.\n",
       " * @param {string} outputId Element ID of the output display.\n",
       " * @return {!Iterable<!Object>} Iterable of next steps.\n",
       " */\n",
       "function* uploadFilesStep(inputId, outputId) {\n",
       "  const inputElement = document.getElementById(inputId);\n",
       "  inputElement.disabled = false;\n",
       "\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  outputElement.innerHTML = '';\n",
       "\n",
       "  const pickedPromise = new Promise((resolve) => {\n",
       "    inputElement.addEventListener('change', (e) => {\n",
       "      resolve(e.target.files);\n",
       "    });\n",
       "  });\n",
       "\n",
       "  const cancel = document.createElement('button');\n",
       "  inputElement.parentElement.appendChild(cancel);\n",
       "  cancel.textContent = 'Cancel upload';\n",
       "  const cancelPromise = new Promise((resolve) => {\n",
       "    cancel.onclick = () => {\n",
       "      resolve(null);\n",
       "    };\n",
       "  });\n",
       "\n",
       "  // Wait for the user to pick the files.\n",
       "  const files = yield {\n",
       "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
       "    response: {\n",
       "      action: 'starting',\n",
       "    }\n",
       "  };\n",
       "\n",
       "  cancel.remove();\n",
       "\n",
       "  // Disable the input element since further picks are not allowed.\n",
       "  inputElement.disabled = true;\n",
       "\n",
       "  if (!files) {\n",
       "    return {\n",
       "      response: {\n",
       "        action: 'complete',\n",
       "      }\n",
       "    };\n",
       "  }\n",
       "\n",
       "  for (const file of files) {\n",
       "    const li = document.createElement('li');\n",
       "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
       "    li.append(span(\n",
       "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
       "        `last modified: ${\n",
       "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
       "                                    'n/a'} - `));\n",
       "    const percent = span('0% done');\n",
       "    li.appendChild(percent);\n",
       "\n",
       "    outputElement.appendChild(li);\n",
       "\n",
       "    const fileDataPromise = new Promise((resolve) => {\n",
       "      const reader = new FileReader();\n",
       "      reader.onload = (e) => {\n",
       "        resolve(e.target.result);\n",
       "      };\n",
       "      reader.readAsArrayBuffer(file);\n",
       "    });\n",
       "    // Wait for the data to be ready.\n",
       "    let fileData = yield {\n",
       "      promise: fileDataPromise,\n",
       "      response: {\n",
       "        action: 'continue',\n",
       "      }\n",
       "    };\n",
       "\n",
       "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
       "    let position = 0;\n",
       "    do {\n",
       "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
       "      const chunk = new Uint8Array(fileData, position, length);\n",
       "      position += length;\n",
       "\n",
       "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
       "      yield {\n",
       "        response: {\n",
       "          action: 'append',\n",
       "          file: file.name,\n",
       "          data: base64,\n",
       "        },\n",
       "      };\n",
       "\n",
       "      let percentDone = fileData.byteLength === 0 ?\n",
       "          100 :\n",
       "          Math.round((position / fileData.byteLength) * 100);\n",
       "      percent.textContent = `${percentDone}% done`;\n",
       "\n",
       "    } while (position < fileData.byteLength);\n",
       "  }\n",
       "\n",
       "  // All done.\n",
       "  yield {\n",
       "    response: {\n",
       "      action: 'complete',\n",
       "    }\n",
       "  };\n",
       "}\n",
       "\n",
       "scope.google = scope.google || {};\n",
       "scope.google.colab = scope.google.colab || {};\n",
       "scope.google.colab._files = {\n",
       "  _uploadFiles,\n",
       "  _uploadFilesContinue,\n",
       "};\n",
       "})(self);\n",
       "</script> "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-21dc3c638f66>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    165\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    166\u001b[0m           \u001b[0minput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from google.colab import files\n",
    "uploaded = files.upload()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 311
    },
    "id": "DaGX2IF-2uv0",
    "outputId": "a38354c8-25b1-40a2-b69a-ad7531a731aa"
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'generated_20k_dataset_realistic.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-bd95cfde5462>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generated_20k_dataset_realistic.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'generated_20k_dataset_realistic.csv'"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"generated_20k_dataset_realistic.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kfQz3Llc47dV",
    "outputId": "b74ebd6e-8b82-4ffb-9727-7971295b69f3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset created and saved!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "generations = ['Boomer', 'Gen X', 'Millennial', 'Gen Z']\n",
    "slang_by_gen = {\n",
    "    'Boomer': ['groovy', 'far out', 'square'],\n",
    "    'Gen X': ['rad', 'gnarly', 'poser'],\n",
    "    'Millennial': ['on fleek', 'adulting', 'basic'],\n",
    "    'Gen Z': ['no cap', 'bet', 'rizz']\n",
    "}\n",
    "\n",
    "def generate_sentence(gen):\n",
    "    slang = random.choice(slang_by_gen[gen])\n",
    "    templates = [\n",
    "        f\"That was so {slang}!\",\n",
    "        f\"I'm totally feeling {slang} vibes today.\",\n",
    "        f\"Honestly, it's just {slang} out here.\",\n",
    "        f\"This party is {slang}, not gonna lie.\",\n",
    "    ]\n",
    "    return random.choice(templates)\n",
    "\n",
    "data = []\n",
    "for _ in range(20000):\n",
    "    gen = random.choice(generations)\n",
    "    sentence = generate_sentence(gen)\n",
    "    data.append((sentence, gen))\n",
    "\n",
    "df = pd.DataFrame(data, columns=[\"sentence\", \"generation\"])\n",
    "df.to_csv(\"generated_20k_dataset_realistic.csv\", index=False)\n",
    "print(\"Dataset created and saved!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "4Niky3qU5Keq"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"generated_20k_dataset_realistic.csv\")\n",
    "\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "AbZcfITX5NaQ"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "\n",
    "class SlangDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, dataframe):\n",
    "        self.texts = dataframe['sentence'].tolist()\n",
    "        self.labels = [label_map[label] for label in dataframe['generation']]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.texts[idx], torch.tensor(self.labels[idx])\n",
    "\n",
    "dataset = SlangDataset(df)\n",
    "train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "w6ckDXrd5PNt"
   },
   "outputs": [],
   "source": [
    "from transformers import BertTokenizer, BertModel\n",
    "\n",
    "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
    "bert = BertModel.from_pretrained(\"bert-base-uncased\")\n",
    "\n",
    "def get_embeddings(text_list):\n",
    "    inputs = tokenizer(text_list, padding=True, truncation=True, return_tensors=\"pt\")\n",
    "    with torch.no_grad():\n",
    "        outputs = bert(**inputs)\n",
    "        return outputs.pooler_output  # CLS token embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "Bkh_yU2N5RUg"
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "class FFNNClassifier(nn.Module):\n",
    "    def __init__(self, hidden_dim=128, num_classes=4):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(768, hidden_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(hidden_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        return self.fc2(x)\n",
    "\n",
    "model = FFNNClassifier()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "UAzpemFNDfCd"
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "afoODgn_Dh3Q"
   },
   "outputs": [],
   "source": [
    "loss_fn = nn.CrossEntropyLoss()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "f38aKVFgDlIs"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from transformers import BertTokenizer, BertModel\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 216
    },
    "id": "4nqhoZsd5TSA",
    "outputId": "c3c07dab-7c33-4787-ac9d-01e6f4c4ecfc"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'model' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-bdcf7b1fdb99>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mloss_fn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCrossEntropyLoss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mEPOCHS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEPOCHS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
     ]
    }
   ],
   "source": [
    "loss_fn = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "EPOCHS = 3\n",
    "for epoch in range(EPOCHS):\n",
    "    total_loss = 0\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts)\n",
    "        preds = model(embeddings)\n",
    "        loss = loss_fn(preds, labels)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        total_loss += loss.item()\n",
    "\n",
    "    print(f\"Epoch {epoch+1}, Loss: {total_loss:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "B61DU0oDD48-",
    "outputId": "14517c0a-e0cd-43d7-d21b-d31253e5066f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Dataset created and saved.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "generations = ['Boomer', 'Gen X', 'Millennial', 'Gen Z']\n",
    "slang_by_gen = {\n",
    "    'Boomer': ['groovy', 'far out', 'square'],\n",
    "    'Gen X': ['rad', 'gnarly', 'poser'],\n",
    "    'Millennial': ['on fleek', 'adulting', 'basic'],\n",
    "    'Gen Z': ['no cap', 'bet', 'rizz']\n",
    "}\n",
    "\n",
    "def generate_sentence(gen):\n",
    "    slang = random.choice(slang_by_gen[gen])\n",
    "    templates = [\n",
    "        f\"That was so {slang}!\",\n",
    "        f\"I'm totally feeling {slang} vibes today.\",\n",
    "        f\"Honestly, it's just {slang} out here.\",\n",
    "        f\"This party is {slang}, not gonna lie.\",\n",
    "    ]\n",
    "    return random.choice(templates)\n",
    "\n",
    "data = []\n",
    "for _ in range(20000):\n",
    "    gen = random.choice(generations)\n",
    "    sentence = generate_sentence(gen)\n",
    "    data.append((sentence, gen))\n",
    "\n",
    "df = pd.DataFrame(data, columns=[\"sentence\", \"generation\"])\n",
    "df.to_csv(\"generated_20k_dataset_realistic.csv\", index=False)\n",
    "\n",
    "print(\"✅ Dataset created and saved.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 340,
     "referenced_widgets": [
      "c42d0cd55d5c4b17bcde750270180bec",
      "c2c216697fa84dd6813d0537daa9cfac",
      "4d5816223f5940acb98384f40458596f",
      "abf9bb3d6c6842cc9a6b28b535c949d6",
      "5a2c04a01fda40a4988878d6077e9ae8",
      "a0c01dc6e80e4999a8c117e01e26f33b",
      "50e88c8f17eb44958f56923be41a7817",
      "e92ec217825c4d60bfed32a270602f8d",
      "1af3b5d8c78348c3a34ee3f6b47a1e6d",
      "0ebfe6b8bb2446ec9ea0bbe8823df285",
      "de899ca6193646f3817a9eddeca5ec1e",
      "c05f545cee7e401482e6b8a9001e1732",
      "2de15e2dd53341908afee6035dc039f7",
      "3044428cbf1645c5825b5dfb8ae47b62",
      "b38f0dfa188f4a3c95a9600113479c0f",
      "048bea9b520b4b4aa78add1fcdf954cb",
      "e58c91eb623f4f83b9664e3dce5769bd",
      "27517046de644271b9bfdbe259e6f53c",
      "3da3a31001be495a8c99ed65605e3253",
      "13862277e8b24153984d999f5b3b967a",
      "2f60845289d543d2bebb929cfbfb3a93",
      "fc23a3287dbf46938b699e03ac7bddd9",
      "aec6a8222fec4a1c9628097228dbc49b",
      "a66f0858f8924b2babdab435d90c0d59",
      "7d29b026e0b54f15b131223bee9a03e5",
      "fe92a03294ed4d34bffc06b4319aad2e",
      "70bb0ce4266c4f4ba8c994c3aae06fff",
      "ec6192cef54d42d9b7e97b005d4c0c71",
      "12378d60c3f04d5584e18c53383daea2",
      "3a2f59e41cfc4ee383db12e016a6cfb2",
      "86fb72d6efb8478cb86127900558ec7f",
      "96dd38aefaf44039be5a67be4a1e6cc4",
      "26c935ef80b44ba183692e4066502b9a",
      "30027628e53849088cd2515db5154443",
      "680ee34280164f2a9d4bcd8c6c57056e",
      "623debc0b0564e5cac470d4b3261fd41",
      "0f6d52bcfe464c14a37f08e000570c77",
      "e27aab5b37c14dba9cfcd817bf3994a3",
      "36588db35694486ea03c41a1bd2c9e3c",
      "a85fe868bc2f4f8185b734b43299260e",
      "de6104e4d76b4d6d978b09842e11fb5a",
      "eb692811ec874118987722af73bdb1f5",
      "920df1c034a04117ac9ef3251d7ce990",
      "9d13e8fa585a43e499e60d524149e437",
      "c63c6c1dad864aa495cdbc76dfa2d5ca",
      "a85432c39cbd444ab7d03ecf41df67ea",
      "aab0f7e8fa004035a5a1550cbb8b3912",
      "b20332f5ae164a138b1b671317047a77",
      "d8c0997d772e4807b9420e6014161ae0",
      "8404c49a0dfb46059acc7c1e4d83fd59",
      "0ba2b2415eee409b87edddb9e1c1239b",
      "6756897e856f4a64b8bf0b90c7f6bde9",
      "54e6dee09c1d4978b409588a804e3bf1",
      "1e089236d1fb405fb97ad81ddfc037b2",
      "e27202926013493c81b9031d4add2c6d"
     ]
    },
    "id": "bVXZG8btDzpW",
    "outputId": "66fed9dc-d926-4a4a-cbe8-08e6fd6b1a0b"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c42d0cd55d5c4b17bcde750270180bec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c05f545cee7e401482e6b8a9001e1732",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aec6a8222fec4a1c9628097228dbc49b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "30027628e53849088cd2515db5154443",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n",
      "WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c63c6c1dad864aa495cdbc76dfa2d5ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# === All Imports ===\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from transformers import BertTokenizer, BertModel\n",
    "\n",
    "# === Device setup ===\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# === Load dataset ===\n",
    "df = pd.read_csv(\"generated_20k_dataset_realistic.csv\")\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "# === Dataset and DataLoader ===\n",
    "class SlangDataset(Dataset):\n",
    "    def __init__(self, dataframe):\n",
    "        self.texts = dataframe['sentence'].tolist()\n",
    "        self.labels = [label_map[label] for label in dataframe['generation']]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.texts[idx], torch.tensor(self.labels[idx])\n",
    "\n",
    "dataset = SlangDataset(df)\n",
    "train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n",
    "\n",
    "# === Tokenizer + BERT model ===\n",
    "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
    "bert = BertModel.from_pretrained(\"bert-base-uncased\").to(device)\n",
    "\n",
    "def get_embeddings(text_list):\n",
    "    inputs = tokenizer(text_list, padding=True, truncation=True, return_tensors=\"pt\").to(device)\n",
    "    with torch.no_grad():\n",
    "        outputs = bert(**inputs)\n",
    "        return outputs.pooler_output\n",
    "\n",
    "# === FFNN Model ===\n",
    "class FFNNClassifier(nn.Module):\n",
    "    def __init__(self, hidden_dim=128, num_classes=4):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(768, hidden_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(hidden_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        return self.fc2(x)\n",
    "\n",
    "model = FFNNClassifier().to(device)\n",
    "\n",
    "# === Loss & Optimizer ===\n",
    "loss_fn = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "uSYaWYZ8EBb9",
    "outputId": "94cd4907-c021-4ad5-e835-b613a50a1efb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 816.7947\n",
      "Epoch 2, Loss: 729.3611\n",
      "Epoch 3, Loss: 613.5706\n"
     ]
    }
   ],
   "source": [
    "EPOCHS = 3\n",
    "for epoch in range(EPOCHS):\n",
    "    total_loss = 0\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts)\n",
    "        preds = model(embeddings)\n",
    "        loss = loss_fn(preds, labels.to(device))\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        total_loss += loss.item()\n",
    "\n",
    "    print(f\"Epoch {epoch+1}, Loss: {total_loss:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IMzdkPTmEvSV",
    "outputId": "36b99f1f-13aa-4b0b-dacf-41928d196a6c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy: 83.17%\n"
     ]
    }
   ],
   "source": [
    "correct = 0\n",
    "total = 0\n",
    "model.eval()\n",
    "\n",
    "with torch.no_grad():\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts)\n",
    "        outputs = model(embeddings)\n",
    "        predictions = torch.argmax(outputs, dim=1)\n",
    "        correct += (predictions == labels.to(device)).sum().item()\n",
    "        total += labels.size(0)\n",
    "\n",
    "accuracy = correct / total\n",
    "print(f\"Training Accuracy: {accuracy:.2%}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "NtXcfcOkFXDV"
   },
   "outputs": [],
   "source": [
    "test_sentences = [\n",
    "    \"This party is lit fr no cap\",                # Gen Z\n",
    "    \"Ugh, adulting is hard\",                      # Millennial\n",
    "    \"That's totally gnarly, dude\",                # Gen X\n",
    "    \"Man, this joint is groovy\",                  # Boomer\n",
    "    \"The vibe is unmatched\",                      # Neutral or ambiguous\n",
    "    \"Basic AF but it works\",                      # Millennial-ish\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "m_-KOcCgFZEG"
   },
   "outputs": [],
   "source": [
    "slang_by_gen = {\n",
    "    'Boomer': ['groovy', 'far out', 'square'],\n",
    "    'Gen X': ['rad', 'gnarly', 'poser'],\n",
    "    'Millennial': ['on fleek', 'adulting', 'basic'],\n",
    "    'Gen Z': ['no cap', 'bet', 'rizz', 'fr', 'lit']\n",
    "}\n",
    "\n",
    "def rule_based_predict(sentence):\n",
    "    scores = {gen: 0 for gen in slang_by_gen}\n",
    "    words = sentence.lower().split()\n",
    "    for gen, slang_list in slang_by_gen.items():\n",
    "        scores[gen] = sum(word in slang_list for word in words)\n",
    "    return max(scores, key=scores.get)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zytAKeimFbq7",
    "outputId": "caaacbcf-81f6-4458-edc5-c5639d30ba71"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentence: This party is lit fr no cap\n",
      "  Rule-based: Gen Z\n",
      "  FFNN+BERT : Millennial\n",
      "----------------------------------------\n",
      "Sentence: Ugh, adulting is hard\n",
      "  Rule-based: Millennial\n",
      "  FFNN+BERT : Gen Z\n",
      "----------------------------------------\n",
      "Sentence: That's totally gnarly, dude\n",
      "  Rule-based: Boomer\n",
      "  FFNN+BERT : Millennial\n",
      "----------------------------------------\n",
      "Sentence: Man, this joint is groovy\n",
      "  Rule-based: Boomer\n",
      "  FFNN+BERT : Gen X\n",
      "----------------------------------------\n",
      "Sentence: The vibe is unmatched\n",
      "  Rule-based: Boomer\n",
      "  FFNN+BERT : Millennial\n",
      "----------------------------------------\n",
      "Sentence: Basic AF but it works\n",
      "  Rule-based: Millennial\n",
      "  FFNN+BERT : Millennial\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "for sent in test_sentences:\n",
    "    embedding = get_embeddings([sent])  # single sentence\n",
    "    with torch.no_grad():\n",
    "        pred = model(embedding)\n",
    "        predicted_idx = torch.argmax(pred, dim=1).item()\n",
    "        predicted_gen = [k for k, v in label_map.items() if v == predicted_idx][0]\n",
    "\n",
    "    rule_based = rule_based_predict(sent)\n",
    "    print(f\"Sentence: {sent}\")\n",
    "    print(f\"  Rule-based: {rule_based}\")\n",
    "    print(f\"  FFNN+BERT : {predicted_gen}\")\n",
    "    print(\"-\" * 40)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lm2KOjk5GBLt"
   },
   "source": [
    "# Logistic Regression and SVM\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "jsqs41p0GP2z"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "X = []\n",
    "y = []\n",
    "\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts).cpu()\n",
    "        X.append(embeddings)\n",
    "        y.append(labels)\n",
    "\n",
    "X = torch.cat(X).numpy()\n",
    "y = torch.cat(y).numpy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "JeNfnynbGhOv"
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "class FFNNClassifier(nn.Module):\n",
    "    def __init__(self, hidden_dim=128, num_classes=4):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(768, hidden_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(hidden_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        return self.fc2(x)\n",
    "\n",
    "import torch\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "model = FFNNClassifier().to(device)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "QjKoE3a-Wqoi"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "GSdzgycQYd40"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "# Define device\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Define model\n",
    "class FFNNClassifier(nn.Module):\n",
    "    def __init__(self, hidden_dim=128, num_classes=4):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(768, hidden_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(hidden_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        return self.fc2(x)\n",
    "\n",
    "model = FFNNClassifier().to(device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "yvIJV8YpX7qB"
   },
   "outputs": [],
   "source": [
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 233
    },
    "id": "291kFeGTWkC1",
    "outputId": "64b00ecf-05cc-4a26-dcf0-bd73e81dcab6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔎 Logistic Regression:\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'y_pred_log' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-e001c5769c92>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"🔎 Logistic Regression:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred_log\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabel_map\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"🔎 SVM:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'y_pred_log' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "print(\"🔎 Logistic Regression:\")\n",
    "print(classification_report(y, y_pred_log, target_names=label_map.keys()))\n",
    "\n",
    "print(\"🔎 SVM:\")\n",
    "print(classification_report(y, y_pred_svm, target_names=label_map.keys()))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 454
    },
    "id": "TVnYw9e8YqCX",
    "outputId": "cc30f6c4-2a14-49a1-b34a-84bb99ab604f"
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Expected 2D array, got 1D array instead:\narray=[].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-56d22631e8d6>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Train Logistic Regression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mlog_reg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mlog_reg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0my_pred_log\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlog_reg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1220\u001b[0m             \u001b[0m_dtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1222\u001b[0;31m         X, y = validate_data(\n\u001b[0m\u001b[1;32m   1223\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1224\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2959\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2960\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2961\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2962\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1368\u001b[0m     \u001b[0mensure_all_finite\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deprecate_force_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mforce_all_finite\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_all_finite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1370\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m   1371\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m   1091\u001b[0m                         \u001b[0;34m\"if it contains a single sample.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m                     )\n\u001b[0;32m-> 1093\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1095\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype_numeric\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"kind\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m\"USV\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# Train Logistic Regression\n",
    "log_reg = LogisticRegression(max_iter=1000)\n",
    "log_reg.fit(X, y)\n",
    "y_pred_log = log_reg.predict(X)\n",
    "\n",
    "# Train SVM\n",
    "svm = SVC()\n",
    "svm.fit(X, y)\n",
    "y_pred_svm = svm.predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 144
    },
    "id": "_Vkg0S0PYwX4",
    "outputId": "dd4a8007-f4f4-48f2-9e3d-cc1ab4a732bf"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'train_loader' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-21109e4796d9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'train_loader' is not defined"
     ]
    }
   ],
   "source": [
    "print(len(train_loader))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Qe7LeR9LY5yC",
    "outputId": "361ff91f-0454-48f6-feb9-04b26fb972e4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Dataset regenerated and saved!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "generations = ['Boomer', 'Gen X', 'Millennial', 'Gen Z']\n",
    "slang_by_gen = {\n",
    "    'Boomer': ['groovy', 'far out', 'square'],\n",
    "    'Gen X': ['rad', 'gnarly', 'poser'],\n",
    "    'Millennial': ['on fleek', 'adulting', 'basic'],\n",
    "    'Gen Z': ['no cap', 'bet', 'rizz', 'lit', 'fr']\n",
    "}\n",
    "\n",
    "def generate_sentence(gen):\n",
    "    slang = random.choice(slang_by_gen[gen])\n",
    "    templates = [\n",
    "        f\"That was so {slang}!\",\n",
    "        f\"I'm totally feeling {slang} vibes today.\",\n",
    "        f\"Honestly, it's just {slang} out here.\",\n",
    "        f\"This party is {slang}, not gonna lie.\",\n",
    "    ]\n",
    "    return random.choice(templates)\n",
    "\n",
    "data = []\n",
    "for _ in range(20000):\n",
    "    gen = random.choice(generations)\n",
    "    sentence = generate_sentence(gen)\n",
    "    data.append((sentence, gen))\n",
    "\n",
    "df = pd.DataFrame(data, columns=[\"sentence\", \"generation\"])\n",
    "df.to_csv(\"generated_20k_dataset_realistic.csv\", index=False)\n",
    "\n",
    "print(\"✅ Dataset regenerated and saved!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nTuCBa3MY1JK",
    "outputId": "94cdeca4-3904-4f5b-e09e-d3a53c7c440b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ train_loader is ready with 625 batches\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torch\n",
    "\n",
    "# Load your dataset\n",
    "df = pd.read_csv(\"generated_20k_dataset_realistic.csv\")\n",
    "\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "# Dataset class\n",
    "class SlangDataset(Dataset):\n",
    "    def __init__(self, dataframe):\n",
    "        self.texts = dataframe['sentence'].tolist()\n",
    "        self.labels = [label_map[label] for label in dataframe['generation']]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.texts[idx], torch.tensor(self.labels[idx])\n",
    "\n",
    "dataset = SlangDataset(df)\n",
    "train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n",
    "\n",
    "print(\"✅ train_loader is ready with\", len(train_loader), \"batches\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 340,
     "referenced_widgets": [
      "9cd931d864b9473cb1294167490af0b0",
      "37900de11d424572b5f6cbe8d325edb2",
      "7d5db8377f424bf18bce7e30a931a69d",
      "94693ea097c54d20a0b20f829e3d202c",
      "cdd738d8caf14595a5b747e420707369",
      "080efa0539844a88816567a5c8a78bb1",
      "d7e1cacff2a6414c83bd56a601b52735",
      "4dccd35bcf0443c29ff58bd61e898192",
      "ea2b6a5442ad46b587b81930ccb52a98",
      "bad21d47b4ac4aaf99c40dacc4b62003",
      "7079ee7bf8604230987107f5b83c0d4c",
      "f4d87cda26b047b3aa09fe0bd022e778",
      "6e7f9bc435b345bb9742342246d239dd",
      "e52b671cdbda4470a22ca78f9eea850a",
      "b23db3e21a15472d9ddc1b69d1c632bc",
      "5e72c91db3d84ea99d37ab144a9ff833",
      "49259b94f3e749e18e478c96c07f3499",
      "c50cddbd536e4e818eeb8c93036defec",
      "31659b7157f3403b89e4527df481d207",
      "e4c7362c6870483a8dce8facb6609b52",
      "6afa211f193c4586a988c14204e84ccb",
      "34d2ef352d614b179bb5b8fd23a751f2",
      "6e9b8375c57d42f1890f0814f90649ab",
      "8e0c2824938540548bf3ac9731c605f5",
      "36fa1c37b8344489b2aa0cced4b648f3",
      "acfe94f658f94373969b30e763fa5ab0",
      "9be900d5245347ceb392524ea6745915",
      "1e91392526134a5ea477143690cce2ea",
      "9667768f6d784049a603a432cbf3a633",
      "e3524ea161544773a59ca3b03ff37641",
      "1831f990f41f49b2a070220123ade564",
      "c989c9713afc4c2abc95beb2da5849ed",
      "52aa48b213a14ebfbc14c938f7213bd0",
      "086f7c69d4014395ad071a6eb74e3f19",
      "619821582be948b4b2633fe9d557864f",
      "fc1b90bc23224c5198dc6152b8896f8b",
      "d15dbecc593f43a28a3c633115f70b92",
      "3f89c629a7764680bf911075a16e1b26",
      "6cb67dad29bb4cd383b6dad9c4c7c667",
      "51af75ab068b4a788d7cbc250ea63502",
      "0b5eb7a6bd5b42ec8b2462a106824df8",
      "9ec9ba603ea34d6eb2c9a6678b18cc4a",
      "10fd6abaa5e24632aad68820d7fdd412",
      "c63ae490e852434cb2c113ef44fd86c3",
      "2d724037b9614d738263121eec683861",
      "61917317f22f4c449b86b352c65d1f86",
      "a04a6195aec649eda59ab39d49e75aa2",
      "d5cfcdd613ff45f68a9e23894370e966",
      "95e85f720baf4deeb95107b61fb37f95",
      "a4d1cc1b63e2454bafccc0a59e3460cf",
      "213c35c80287485fb98e2669961a4760",
      "1592a1cef0dd4a5b84c5debda596717e",
      "f7850cfa793b43f8870cbedd54aad0fc",
      "eccce98ada8044adb43ccce63de76ada",
      "13d8006047754398a6c5159204a1e4cf"
     ]
    },
    "id": "786Xqq8KZHCy",
    "outputId": "e0ba2796-af7b-4113-8b7a-bbb3040be6dc"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9cd931d864b9473cb1294167490af0b0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f4d87cda26b047b3aa09fe0bd022e778",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6e9b8375c57d42f1890f0814f90649ab",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "086f7c69d4014395ad071a6eb74e3f19",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n",
      "WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2d724037b9614d738263121eec683861",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from transformers import BertTokenizer, BertModel\n",
    "\n",
    "# Load tokenizer and model\n",
    "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
    "bert = BertModel.from_pretrained(\"bert-base-uncased\").to(device)\n",
    "\n",
    "# Embedding function using BERT\n",
    "def get_embeddings(text_list):\n",
    "    inputs = tokenizer(text_list, padding=True, truncation=True, return_tensors=\"pt\").to(device)\n",
    "    with torch.no_grad():\n",
    "        outputs = bert(**inputs)\n",
    "        return outputs.pooler_output  # [CLS] embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9urYB6u6ZVvb",
    "outputId": "dbcd02b6-758e-49d1-d3fa-eb44cb5783f2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ X shape: (20000, 768)\n",
      "✅ y shape: (20000,)\n"
     ]
    }
   ],
   "source": [
    "X = []\n",
    "y = []\n",
    "\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts).cpu()\n",
    "        X.append(embeddings)\n",
    "        y.append(labels)\n",
    "\n",
    "X = torch.cat(X).numpy()\n",
    "y = torch.cat(y).numpy()\n",
    "\n",
    "print(\"✅ X shape:\", X.shape)\n",
    "print(\"✅ y shape:\", y.shape)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "e62edBU8Zz3e"
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# Train Logistic Regression\n",
    "log_reg = LogisticRegression(max_iter=1000)\n",
    "log_reg.fit(X, y)\n",
    "y_pred_log = log_reg.predict(X)\n",
    "\n",
    "# Train SVM\n",
    "svm = SVC()\n",
    "svm.fit(X, y)\n",
    "y_pred_svm = svm.predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "QIFsOARlc0Wy"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"noisy_slang_dataset.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Ewl0-WMMax3L",
    "outputId": "3d989913-deed-4056-e2dc-eb2548c8bdde"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔎 Logistic Regression:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       1.00      1.00      1.00      5071\n",
      "       Gen X       1.00      1.00      1.00      4988\n",
      "  Millennial       1.00      1.00      1.00      4927\n",
      "       Gen Z       1.00      1.00      1.00      5014\n",
      "\n",
      "    accuracy                           1.00     20000\n",
      "   macro avg       1.00      1.00      1.00     20000\n",
      "weighted avg       1.00      1.00      1.00     20000\n",
      "\n",
      "🔎 SVM:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       1.00      1.00      1.00      5071\n",
      "       Gen X       1.00      1.00      1.00      4988\n",
      "  Millennial       1.00      1.00      1.00      4927\n",
      "       Gen Z       1.00      1.00      1.00      5014\n",
      "\n",
      "    accuracy                           1.00     20000\n",
      "   macro avg       1.00      1.00      1.00     20000\n",
      "weighted avg       1.00      1.00      1.00     20000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "print(\"🔎 Logistic Regression:\")\n",
    "print(classification_report(y, y_pred_log, target_names=label_map.keys()))\n",
    "\n",
    "print(\"🔎 SVM:\")\n",
    "print(classification_report(y, y_pred_svm, target_names=label_map.keys()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Bo3pjGkRcxK0",
    "outputId": "f7012cf1-af08-4748-efcd-cf09938b232c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Noisy, realistic dataset saved as noisy_slang_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "generations = ['Boomer', 'Gen X', 'Millennial', 'Gen Z']\n",
    "shared_slang = ['lit', 'fire', 'cool', 'fr', 'vibe']\n",
    "\n",
    "slang_by_gen = {\n",
    "    'Boomer': ['groovy', 'far out', 'square'] + shared_slang,\n",
    "    'Gen X': ['rad', 'gnarly', 'poser'] + shared_slang,\n",
    "    'Millennial': ['on fleek', 'adulting', 'basic'] + shared_slang,\n",
    "    'Gen Z': ['no cap', 'bet', 'rizz'] + shared_slang,\n",
    "}\n",
    "\n",
    "typo_variants = {\n",
    "    'groovy': 'groovey', 'rizz': 'rizzl', 'adulting': 'adulating',\n",
    "    'lit': 'littt', 'fr': 'frfr', 'cool': 'kool'\n",
    "}\n",
    "\n",
    "def generate_sentence(gen, noisy=False):\n",
    "    slang = random.choice(slang_by_gen[gen])\n",
    "    if noisy and slang in typo_variants:\n",
    "        slang = typo_variants[slang]\n",
    "    templates = [\n",
    "        f\"That was so {slang}!\",\n",
    "        f\"I'm feeling {slang} vibes today.\",\n",
    "        f\"It’s just {slang} out here.\",\n",
    "        f\"This party is {slang}, not gonna lie.\",\n",
    "    ]\n",
    "    return random.choice(templates)\n",
    "\n",
    "def generate_neutral():\n",
    "    return random.choice([\n",
    "        \"Let's go to the movies.\",\n",
    "        \"How was your day?\",\n",
    "        \"I really like coffee.\",\n",
    "        \"The weather's nice today.\",\n",
    "        \"That's interesting.\"\n",
    "    ])\n",
    "\n",
    "data = []\n",
    "\n",
    "for _ in range(18000):  # 90% slang\n",
    "    gen = random.choice(generations)\n",
    "    noisy = random.random() < 0.15  # 15% noise\n",
    "    sent = generate_sentence(gen, noisy=noisy)\n",
    "    data.append((sent, gen))\n",
    "\n",
    "for _ in range(2000):  # 10% neutral\n",
    "    sent = generate_neutral()\n",
    "    gen = random.choice(generations)  # force model to guess\n",
    "    data.append((sent, gen))\n",
    "\n",
    "random.shuffle(data)\n",
    "\n",
    "df = pd.DataFrame(data, columns=[\"sentence\", \"generation\"])\n",
    "df.to_csv(\"noisy_slang_dataset.csv\", index=False)\n",
    "\n",
    "print(\"✅ Noisy, realistic dataset saved as noisy_slang_dataset.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3pJ3Au5Ac-Ov",
    "outputId": "75330651-ee64-4bd6-815c-4577c247f511"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Reloaded train_loader with 625 batches\n"
     ]
    }
   ],
   "source": [
    "from torch.utils.data import Dataset, DataLoader\n",
    "import pandas as pd\n",
    "import torch\n",
    "\n",
    "# Load updated dataset\n",
    "df = pd.read_csv(\"noisy_slang_dataset.csv\")\n",
    "\n",
    "label_map = {'Boomer': 0, 'Gen X': 1, 'Millennial': 2, 'Gen Z': 3}\n",
    "\n",
    "class SlangDataset(Dataset):\n",
    "    def __init__(self, dataframe):\n",
    "        self.texts = dataframe['sentence'].tolist()\n",
    "        self.labels = [label_map[label] for label in dataframe['generation']]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.texts[idx], torch.tensor(self.labels[idx])\n",
    "\n",
    "dataset = SlangDataset(df)\n",
    "train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n",
    "\n",
    "print(\"✅ Reloaded train_loader with\", len(train_loader), \"batches\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "40rl3QwzdBap",
    "outputId": "3956f5ab-6965-4c12-ceaa-76ff494cbac1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ New BERT embeddings ready: (20000, 768) (20000,)\n"
     ]
    }
   ],
   "source": [
    "X = []\n",
    "y = []\n",
    "\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for texts, labels in train_loader:\n",
    "        embeddings = get_embeddings(texts).cpu()\n",
    "        X.append(embeddings)\n",
    "        y.append(labels)\n",
    "\n",
    "X = torch.cat(X).numpy()\n",
    "y = torch.cat(y).numpy()\n",
    "\n",
    "print(\"✅ New BERT embeddings ready:\", X.shape, y.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "I5v0J4N9dJl9",
    "outputId": "0c0d99ed-ff2f-40b7-e5d7-dc1e92f6627d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔎 Logistic Regression (on noisy data):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       0.25      0.24      0.25      5102\n",
      "       Gen X       0.24      0.25      0.24      4884\n",
      "  Millennial       0.25      0.25      0.25      5005\n",
      "       Gen Z       0.25      0.25      0.25      5009\n",
      "\n",
      "    accuracy                           0.25     20000\n",
      "   macro avg       0.25      0.25      0.25     20000\n",
      "weighted avg       0.25      0.25      0.25     20000\n",
      "\n",
      "🔎 SVM (on noisy data):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      Boomer       0.25      0.24      0.25      5102\n",
      "       Gen X       0.24      0.25      0.24      4884\n",
      "  Millennial       0.25      0.25      0.25      5005\n",
      "       Gen Z       0.25      0.25      0.25      5009\n",
      "\n",
      "    accuracy                           0.25     20000\n",
      "   macro avg       0.25      0.25      0.25     20000\n",
      "weighted avg       0.25      0.25      0.25     20000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(\"🔎 Logistic Regression (on noisy data):\")\n",
    "print(classification_report(y, y_pred_log, target_names=label_map.keys()))\n",
    "\n",
    "print(\"🔎 SVM (on noisy data):\")\n",
    "print(classification_report(y, y_pred_svm, target_names=label_map.keys()))\n"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
