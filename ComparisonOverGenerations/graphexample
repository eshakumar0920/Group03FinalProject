# Install libraries (if not already installed)
!pip install transformers nltk scikit-learn torch pandas matplotlib

# Import libraries
import nltk
import string
import pandas as pd
import matplotlib.pyplot as plt
from nltk.corpus import wordnet
from transformers import BertTokenizer, BertModel
import torch
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Download NLTK data
nltk.download('wordnet')

# Generation-specific slang dictionaries
boomer_slang = {
    "groovy": "cool",
    "far out": "amazing",
    "square": "boring or traditional",
    "bummed out": "sad",
    "dig it": "understand or like"
}

genx_slang = {
    "phat": "excellent",
    "rad": "cool",
    "whatever": "dismissive attitude",
    "psyche": "just kidding",
    "poser": "fake person"
}

millennial_slang = {
    "adulting": "doing grown-up tasks",
    "basic": "mainstream or boring",
    "salty": "upset",
    "savage": "bold or ruthless",
    "throw shade": "insult indirectly"
}

genz_slang = {
    "no cap": "no lie",
    "bet": "okay or yes",
    "vibe check": "mood test",
    "rizz": "charisma",
    "slaps": "very good"
}

# Slang dictionaries grouped
generation_slang = {
    "Boomer": boomer_slang,
    "Gen X": genx_slang,
    "Millennial": millennial_slang,
    "Gen Z": genz_slang
}

# Initialize tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Function to analyze sentence
def detect_generation(sentence):
    # Lowercase and clean
    sentence_clean = sentence.lower()

    # Initialize scores
    generation_scores = {gen: 0 for gen in generation_slang.keys()}
    generation_matches = {gen: [] for gen in generation_slang.keys()}
    word_classifications = []

    # Check full slang phrases
    for gen, slang_dict in generation_slang.items():
        for slang_term in slang_dict.keys():
            if slang_term in sentence_clean:
                generation_scores[gen] += 1
                generation_matches[gen].append(slang_term)
                word_classifications.append((slang_term, gen))

    # Determine best match
    if all(score == 0 for score in generation_scores.values()):
        best_gen = "No strong match"
    else:
        best_gen = max(generation_scores, key=generation_scores.get)

    # Build result
    result = {
        "sentence": sentence,
        "generation_scores": generation_scores,
        "generation_matches": generation_matches,
        "word_classifications": word_classifications,
        "predicted_generation": best_gen
    }

    return result

# Example sentences to test
sentences = [
    "Yo that song slaps no cap.",
    "Man, that party was groovy.",
    "She is savage for throwing shade like that.",
    "Dude, that trick was rad!",
    "Adulting is so hard sometimes."
]

# Analyze sentences and collect all results
all_results = []

for sent in sentences:
    output = detect_generation(sent)
    all_results.append(output)

    print(f"\nSentence: {output['sentence']}")
    print(f"Predicted Generation: {output['predicted_generation']}")
    print("Matches:")
    for gen, matches in output['generation_matches'].items():
        if matches:
            print(f"  {gen}: {matches}")
    print("\nIndividual Word Classifications:")
    if output['word_classifications']:
        df_words = pd.DataFrame(output['word_classifications'], columns=["Word", "Generation"])
        print(df_words.to_string(index=False))
    else:
        print("No slang words matched.")

# Plot overall summary chart
summary_scores = {gen: 0 for gen in generation_slang.keys()}
for res in all_results:
    for gen, score in res['generation_scores'].items():
        summary_scores[gen] += score

# Bar plot
plt.figure(figsize=(8,5))
plt.bar(summary_scores.keys(), summary_scores.values(), color='skyblue')
plt.title("Total Slang Matches by Generation")
plt.xlabel("Generation")
plt.ylabel("Number of Matches")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()# Install libraries (if not already installed)
!pip install transformers nltk scikit-learn torch pandas matplotlib

# Import libraries
import nltk
import string
import pandas as pd
import matplotlib.pyplot as plt
from nltk.corpus import wordnet
from transformers import BertTokenizer, BertModel
import torch
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Download NLTK data
nltk.download('wordnet')

# Generation-specific slang dictionaries
boomer_slang = {
    "groovy": "cool",
    "far out": "amazing",
    "square": "boring or traditional",
    "bummed out": "sad",
    "dig it": "understand or like"
}

genx_slang = {
    "phat": "excellent",
    "rad": "cool",
    "whatever": "dismissive attitude",
    "psyche": "just kidding",
    "poser": "fake person"
}

millennial_slang = {
    "adulting": "doing grown-up tasks",
    "basic": "mainstream or boring",
    "salty": "upset",
    "savage": "bold or ruthless",
    "throw shade": "insult indirectly"
}

genz_slang = {
    "no cap": "no lie",
    "bet": "okay or yes",
    "vibe check": "mood test",
    "rizz": "charisma",
    "slaps": "very good"
}

# Slang dictionaries grouped
generation_slang = {
    "Boomer": boomer_slang,
    "Gen X": genx_slang,
    "Millennial": millennial_slang,
    "Gen Z": genz_slang
}

# Initialize tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Function to analyze sentence
def detect_generation(sentence):
    # Lowercase and clean
    sentence_clean = sentence.lower()

    # Initialize scores
    generation_scores = {gen: 0 for gen in generation_slang.keys()}
    generation_matches = {gen: [] for gen in generation_slang.keys()}
    word_classifications = []

    # Check full slang phrases
    for gen, slang_dict in generation_slang.items():
        for slang_term in slang_dict.keys():
            if slang_term in sentence_clean:
                generation_scores[gen] += 1
                generation_matches[gen].append(slang_term)
                word_classifications.append((slang_term, gen))

    # Determine best match
    if all(score == 0 for score in generation_scores.values()):
        best_gen = "No strong match"
    else:
        best_gen = max(generation_scores, key=generation_scores.get)

    # Build result
    result = {
        "sentence": sentence,
        "generation_scores": generation_scores,
        "generation_matches": generation_matches,
        "word_classifications": word_classifications,
        "predicted_generation": best_gen
    }

    return result

# Example sentences to test
sentences = [
    "Yo that song slaps no cap.",
    "Man, that party was groovy.",
    "She is savage for throwing shade like that.",
    "Dude, that trick was rad!",
    "Adulting is so hard sometimes."
]

# Analyze sentences and collect all results
all_results = []

for sent in sentences:
    output = detect_generation(sent)
    all_results.append(output)

    print(f"\nSentence: {output['sentence']}")
    print(f"Predicted Generation: {output['predicted_generation']}")
    print("Matches:")
    for gen, matches in output['generation_matches'].items():
        if matches:
            print(f"  {gen}: {matches}")
    print("\nIndividual Word Classifications:")
    if output['word_classifications']:
        df_words = pd.DataFrame(output['word_classifications'], columns=["Word", "Generation"])
        print(df_words.to_string(index=False))
    else:
        print("No slang words matched.")

# Plot overall summary chart
summary_scores = {gen: 0 for gen in generation_slang.keys()}
for res in all_results:
    for gen, score in res['generation_scores'].items():
        summary_scores[gen] += score

# Bar plot
plt.figure(figsize=(8,5))
plt.bar(summary_scores.keys(), summary_scores.values(), color='skyblue')
plt.title("Total Slang Matches by Generation")
plt.xlabel("Generation")
plt.ylabel("Number of Matches")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
